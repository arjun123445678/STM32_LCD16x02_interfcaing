
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b74  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005d04  08005d04  00006d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d84  08005d84  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d84  08005d84  00006d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d8c  08005d8c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d8c  08005d8c  00006d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d90  08005d90  00006d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005d94  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000910  2000005c  08005df0  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000096c  08005df0  0000796c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001749a  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ecc  00000000  00000000  0001e526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  000213f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010da  00000000  00000000  000229b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e64  00000000  00000000  00023a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c51  00000000  00000000  0004b8ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f30d5  00000000  00000000  0006553f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158614  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006230  00000000  00000000  00158658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0015e888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005cec 	.word	0x08005cec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005cec 	.word	0x08005cec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <lcd_send_cmd>:
  lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
  HAL_Delay(1);
  lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}
void lcd_send_cmd (char cmd)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af02      	add	r7, sp, #8
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
  data_u = (cmd&0xf0);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	f023 030f 	bic.w	r3, r3, #15
 8000570:	73fb      	strb	r3, [r7, #15]
  data_l = ((cmd<<4)&0xf0);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	73bb      	strb	r3, [r7, #14]
  uint8_t data_t[4];
    data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	f043 030c 	orr.w	r3, r3, #12
 800057e:	b2db      	uxtb	r3, r3
 8000580:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	b2db      	uxtb	r3, r3
 800058a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 800058c:	7bbb      	ldrb	r3, [r7, #14]
 800058e:	f043 030c 	orr.w	r3, r3, #12
 8000592:	b2db      	uxtb	r3, r3
 8000594:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	b2db      	uxtb	r3, r3
 800059e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005a0:	f107 0208 	add.w	r2, r7, #8
 80005a4:	2364      	movs	r3, #100	@ 0x64
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2304      	movs	r3, #4
 80005aa:	214e      	movs	r1, #78	@ 0x4e
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <lcd_send_cmd+0x5c>)
 80005ae:	f001 fd83 	bl	80020b8 <HAL_I2C_Master_Transmit>
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200000b0 	.word	0x200000b0

080005c0 <lcd_send_data>:
void lcd_send_data (char data)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f023 030f 	bic.w	r3, r3, #15
 80005d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	f043 030d 	orr.w	r3, r3, #13
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	f043 0309 	orr.w	r3, r3, #9
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 80005ec:	7bbb      	ldrb	r3, [r7, #14]
 80005ee:	f043 030d 	orr.w	r3, r3, #13
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	f043 0309 	orr.w	r3, r3, #9
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000600:	f107 0208 	add.w	r2, r7, #8
 8000604:	2364      	movs	r3, #100	@ 0x64
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2304      	movs	r3, #4
 800060a:	214e      	movs	r1, #78	@ 0x4e
 800060c:	4803      	ldr	r0, [pc, #12]	@ (800061c <lcd_send_data+0x5c>)
 800060e:	f001 fd53 	bl	80020b8 <HAL_I2C_Master_Transmit>
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000b0 	.word	0x200000b0

08000620 <lcd_put_cur>:
void lcd_put_cur(int row, int col)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
    switch (row)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d003      	beq.n	8000638 <lcd_put_cur+0x18>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d005      	beq.n	8000642 <lcd_put_cur+0x22>
 8000636:	e009      	b.n	800064c <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800063e:	603b      	str	r3, [r7, #0]
            break;
 8000640:	e004      	b.n	800064c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000648:	603b      	str	r3, [r7, #0]
            break;
 800064a:	bf00      	nop
    }
    lcd_send_cmd (col);
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ff85 	bl	8000560 <lcd_send_cmd>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <lcd_send_string>:
void lcd_send_string (char *str)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b082      	sub	sp, #8
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
  while (*str) lcd_send_data (*str++);
 8000666:	e006      	b.n	8000676 <lcd_send_string+0x18>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	607a      	str	r2, [r7, #4]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ffa5 	bl	80005c0 <lcd_send_data>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1f4      	bne.n	8000668 <lcd_send_string+0xa>
}
 800067e:	bf00      	nop
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <lcd_init.0>:
int main(void)
{

  /* USER CODE BEGIN 1 */
	void lcd_init (void)
	{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	f8c7 c004 	str.w	ip, [r7, #4]
	  // 4 bit initialisation
	  HAL_Delay(50);  // wait for >40ms
 8000692:	2032      	movs	r0, #50	@ 0x32
 8000694:	f001 f84e 	bl	8001734 <HAL_Delay>
	  lcd_send_cmd (0x30);
 8000698:	2030      	movs	r0, #48	@ 0x30
 800069a:	f7ff ff61 	bl	8000560 <lcd_send_cmd>
	  HAL_Delay(5);  // wait for >4.1ms
 800069e:	2005      	movs	r0, #5
 80006a0:	f001 f848 	bl	8001734 <HAL_Delay>
	  lcd_send_cmd (0x30);
 80006a4:	2030      	movs	r0, #48	@ 0x30
 80006a6:	f7ff ff5b 	bl	8000560 <lcd_send_cmd>
	  HAL_Delay(1);  // wait for >100us
 80006aa:	2001      	movs	r0, #1
 80006ac:	f001 f842 	bl	8001734 <HAL_Delay>
	  lcd_send_cmd (0x30);
 80006b0:	2030      	movs	r0, #48	@ 0x30
 80006b2:	f7ff ff55 	bl	8000560 <lcd_send_cmd>
	  HAL_Delay(10);
 80006b6:	200a      	movs	r0, #10
 80006b8:	f001 f83c 	bl	8001734 <HAL_Delay>
	  lcd_send_cmd (0x20);  // 4bit mode
 80006bc:	2020      	movs	r0, #32
 80006be:	f7ff ff4f 	bl	8000560 <lcd_send_cmd>
	  HAL_Delay(10);
 80006c2:	200a      	movs	r0, #10
 80006c4:	f001 f836 	bl	8001734 <HAL_Delay>

	  // display initialisation
	  lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006c8:	2028      	movs	r0, #40	@ 0x28
 80006ca:	f7ff ff49 	bl	8000560 <lcd_send_cmd>
	  HAL_Delay(1);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f001 f830 	bl	8001734 <HAL_Delay>
	  lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006d4:	2008      	movs	r0, #8
 80006d6:	f7ff ff43 	bl	8000560 <lcd_send_cmd>
	  HAL_Delay(1);
 80006da:	2001      	movs	r0, #1
 80006dc:	f001 f82a 	bl	8001734 <HAL_Delay>
	  lcd_send_cmd (0x01);  // clear display
 80006e0:	2001      	movs	r0, #1
 80006e2:	f7ff ff3d 	bl	8000560 <lcd_send_cmd>
	  HAL_Delay(2);
 80006e6:	2002      	movs	r0, #2
 80006e8:	f001 f824 	bl	8001734 <HAL_Delay>
	  lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006ec:	2006      	movs	r0, #6
 80006ee:	f7ff ff37 	bl	8000560 <lcd_send_cmd>
	  HAL_Delay(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f001 f81e 	bl	8001734 <HAL_Delay>
	  lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006f8:	200c      	movs	r0, #12
 80006fa:	f7ff ff31 	bl	8000560 <lcd_send_cmd>
	}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <main>:
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
int main(void)
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f000 ff99 	bl	800164a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f82c 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f000 fa36 	bl	8000b8c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000720:	f000 f88a 	bl	8000838 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000724:	f000 f900 	bl	8000928 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000728:	f000 f93e 	bl	80009a8 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800072c:	f000 f962 	bl	80009f4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000730:	f000 f99e 	bl	8000a70 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000734:	f000 f9cc 	bl	8000ad0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000738:	f000 f9fa 	bl	8000b30 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800073c:	f000 f8b4 	bl	80008a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */



  lcd_init ();
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	469c      	mov	ip, r3
 8000746:	f7ff ff9f 	bl	8000688 <lcd_init.0>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  	  int num = 1234;
 800074a:	f240 43d2 	movw	r3, #1234	@ 0x4d2
 800074e:	60fb      	str	r3, [r7, #12]
	  	  char numChar[5];
	  	  sprintf(numChar, "%d", num);
 8000750:	463b      	mov	r3, r7
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	4906      	ldr	r1, [pc, #24]	@ (8000770 <main+0x68>)
 8000756:	4618      	mov	r0, r3
 8000758:	f004 fe28 	bl	80053ac <siprintf>
	  	  lcd_put_cur(1, 0);
 800075c:	2100      	movs	r1, #0
 800075e:	2001      	movs	r0, #1
 8000760:	f7ff ff5e 	bl	8000620 <lcd_put_cur>
	  	  lcd_send_string (numChar);
 8000764:	463b      	mov	r3, r7
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff79 	bl	800065e <lcd_send_string>
  {
 800076c:	bf00      	nop
 800076e:	e7ec      	b.n	800074a <main+0x42>
 8000770:	08005d04 	.word	0x08005d04

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b096      	sub	sp, #88	@ 0x58
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2244      	movs	r2, #68	@ 0x44
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f004 fe32 	bl	80053ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	463b      	mov	r3, r7
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000796:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800079a:	f002 f9a7 	bl	8002aec <HAL_PWREx_ControlVoltageScaling>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007a4:	f000 fb90 	bl	8000ec8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007a8:	f002 f982 	bl	8002ab0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007ac:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <SystemClock_Config+0xc0>)
 80007ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80007b2:	4a20      	ldr	r2, [pc, #128]	@ (8000834 <SystemClock_Config+0xc0>)
 80007b4:	f023 0318 	bic.w	r3, r3, #24
 80007b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007bc:	2314      	movs	r3, #20
 80007be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007c4:	2301      	movs	r3, #1
 80007c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007cc:	2360      	movs	r3, #96	@ 0x60
 80007ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007d4:	2301      	movs	r3, #1
 80007d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007dc:	2328      	movs	r3, #40	@ 0x28
 80007de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007e0:	2307      	movs	r3, #7
 80007e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 fa9d 	bl	8002d30 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007fc:	f000 fb64 	bl	8000ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000804:	2303      	movs	r3, #3
 8000806:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	2104      	movs	r1, #4
 8000818:	4618      	mov	r0, r3
 800081a:	f002 fe65 	bl	80034e8 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000824:	f000 fb50 	bl	8000ec8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000828:	f003 fb6c 	bl	8003f04 <HAL_RCCEx_EnableMSIPLLMode>
}
 800082c:	bf00      	nop
 800082e:	3758      	adds	r7, #88	@ 0x58
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40021000 	.word	0x40021000

08000838 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800083c:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <MX_DFSDM1_Init+0x68>)
 800083e:	4a19      	ldr	r2, [pc, #100]	@ (80008a4 <MX_DFSDM1_Init+0x6c>)
 8000840:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000842:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <MX_DFSDM1_Init+0x68>)
 8000844:	2201      	movs	r2, #1
 8000846:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000848:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <MX_DFSDM1_Init+0x68>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800084e:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_DFSDM1_Init+0x68>)
 8000850:	2202      	movs	r2, #2
 8000852:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <MX_DFSDM1_Init+0x68>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_DFSDM1_Init+0x68>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_DFSDM1_Init+0x68>)
 8000862:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000866:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000868:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <MX_DFSDM1_Init+0x68>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800086e:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_DFSDM1_Init+0x68>)
 8000870:	2204      	movs	r2, #4
 8000872:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <MX_DFSDM1_Init+0x68>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_DFSDM1_Init+0x68>)
 800087c:	2201      	movs	r2, #1
 800087e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000880:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <MX_DFSDM1_Init+0x68>)
 8000882:	2200      	movs	r2, #0
 8000884:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_DFSDM1_Init+0x68>)
 8000888:	2200      	movs	r2, #0
 800088a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <MX_DFSDM1_Init+0x68>)
 800088e:	f001 f887 	bl	80019a0 <HAL_DFSDM_ChannelInit>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000898:	f000 fb16 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000078 	.word	0x20000078
 80008a4:	40016020 	.word	0x40016020

080008a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <MX_I2C1_Init+0x74>)
 80008ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000920 <MX_I2C1_Init+0x78>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <MX_I2C1_Init+0x74>)
 80008b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000924 <MX_I2C1_Init+0x7c>)
 80008b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008b8:	4b18      	ldr	r3, [pc, #96]	@ (800091c <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008be:	4b17      	ldr	r3, [pc, #92]	@ (800091c <MX_I2C1_Init+0x74>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c4:	4b15      	ldr	r3, [pc, #84]	@ (800091c <MX_I2C1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ca:	4b14      	ldr	r3, [pc, #80]	@ (800091c <MX_I2C1_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d0:	4b12      	ldr	r3, [pc, #72]	@ (800091c <MX_I2C1_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <MX_I2C1_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <MX_I2C1_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e2:	480e      	ldr	r0, [pc, #56]	@ (800091c <MX_I2C1_Init+0x74>)
 80008e4:	f001 fb4d 	bl	8001f82 <HAL_I2C_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ee:	f000 faeb 	bl	8000ec8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4809      	ldr	r0, [pc, #36]	@ (800091c <MX_I2C1_Init+0x74>)
 80008f6:	f001 ff11 	bl	800271c <HAL_I2CEx_ConfigAnalogFilter>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000900:	f000 fae2 	bl	8000ec8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000904:	2100      	movs	r1, #0
 8000906:	4805      	ldr	r0, [pc, #20]	@ (800091c <MX_I2C1_Init+0x74>)
 8000908:	f001 ff53 	bl	80027b2 <HAL_I2CEx_ConfigDigitalFilter>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000912:	f000 fad9 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000b0 	.word	0x200000b0
 8000920:	40005400 	.word	0x40005400
 8000924:	10d19ce4 	.word	0x10d19ce4

08000928 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800092c:	4b1b      	ldr	r3, [pc, #108]	@ (800099c <MX_I2C2_Init+0x74>)
 800092e:	4a1c      	ldr	r2, [pc, #112]	@ (80009a0 <MX_I2C2_Init+0x78>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000932:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <MX_I2C2_Init+0x74>)
 8000934:	4a1b      	ldr	r2, [pc, #108]	@ (80009a4 <MX_I2C2_Init+0x7c>)
 8000936:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000938:	4b18      	ldr	r3, [pc, #96]	@ (800099c <MX_I2C2_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093e:	4b17      	ldr	r3, [pc, #92]	@ (800099c <MX_I2C2_Init+0x74>)
 8000940:	2201      	movs	r2, #1
 8000942:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000944:	4b15      	ldr	r3, [pc, #84]	@ (800099c <MX_I2C2_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800094a:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_I2C2_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <MX_I2C2_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_I2C2_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_I2C2_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000962:	480e      	ldr	r0, [pc, #56]	@ (800099c <MX_I2C2_Init+0x74>)
 8000964:	f001 fb0d 	bl	8001f82 <HAL_I2C_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800096e:	f000 faab 	bl	8000ec8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000972:	2100      	movs	r1, #0
 8000974:	4809      	ldr	r0, [pc, #36]	@ (800099c <MX_I2C2_Init+0x74>)
 8000976:	f001 fed1 	bl	800271c <HAL_I2CEx_ConfigAnalogFilter>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000980:	f000 faa2 	bl	8000ec8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000984:	2100      	movs	r1, #0
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_I2C2_Init+0x74>)
 8000988:	f001 ff13 	bl	80027b2 <HAL_I2CEx_ConfigDigitalFilter>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000992:	f000 fa99 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000104 	.word	0x20000104
 80009a0:	40005800 	.word	0x40005800
 80009a4:	10d19ce4 	.word	0x10d19ce4

080009a8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_QUADSPI_Init+0x44>)
 80009ae:	4a10      	ldr	r2, [pc, #64]	@ (80009f0 <MX_QUADSPI_Init+0x48>)
 80009b0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <MX_QUADSPI_Init+0x44>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MX_QUADSPI_Init+0x44>)
 80009ba:	2204      	movs	r2, #4
 80009bc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <MX_QUADSPI_Init+0x44>)
 80009c0:	2210      	movs	r2, #16
 80009c2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <MX_QUADSPI_Init+0x44>)
 80009c6:	2217      	movs	r2, #23
 80009c8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <MX_QUADSPI_Init+0x44>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <MX_QUADSPI_Init+0x44>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_QUADSPI_Init+0x44>)
 80009d8:	f002 f8ee 	bl	8002bb8 <HAL_QSPI_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80009e2:	f000 fa71 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000158 	.word	0x20000158
 80009f0:	a0001000 	.word	0xa0001000

080009f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a68 <MX_SPI3_Init+0x74>)
 80009fa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a6c <MX_SPI3_Init+0x78>)
 80009fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a04:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a06:	4b18      	ldr	r3, [pc, #96]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a0e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000a12:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a20:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a26:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a40:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a42:	2207      	movs	r2, #7
 8000a44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a4e:	2208      	movs	r2, #8
 8000a50:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <MX_SPI3_Init+0x74>)
 8000a54:	f003 fc38 	bl	80042c8 <HAL_SPI_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a5e:	f000 fa33 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000019c 	.word	0x2000019c
 8000a6c:	40003c00 	.word	0x40003c00

08000a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a74:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a76:	4a15      	ldr	r2, [pc, #84]	@ (8000acc <MX_USART1_UART_Init+0x5c>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000ab4:	f003 fcab 	bl	800440e <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000abe:	f000 fa03 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000200 	.word	0x20000200
 8000acc:	40013800 	.word	0x40013800

08000ad0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <MX_USART3_UART_Init+0x58>)
 8000ad6:	4a15      	ldr	r2, [pc, #84]	@ (8000b2c <MX_USART3_UART_Init+0x5c>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ada:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <MX_USART3_UART_Init+0x58>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <MX_USART3_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <MX_USART3_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <MX_USART3_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <MX_USART3_UART_Init+0x58>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	@ (8000b28 <MX_USART3_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <MX_USART3_UART_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <MX_USART3_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MX_USART3_UART_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <MX_USART3_UART_Init+0x58>)
 8000b14:	f003 fc7b 	bl	800440e <HAL_UART_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b1e:	f000 f9d3 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000288 	.word	0x20000288
 8000b2c:	40004800 	.word	0x40004800

08000b30 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b34:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b36:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3e:	2206      	movs	r2, #6
 8000b40:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b44:	2202      	movs	r2, #2
 8000b46:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000b60:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b74:	f001 fe69 	bl	800284a <HAL_PCD_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b7e:	f000 f9a3 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000310 	.word	0x20000310

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	@ 0x28
 8000b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba2:	4bbe      	ldr	r3, [pc, #760]	@ (8000e9c <MX_GPIO_Init+0x310>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba6:	4abd      	ldr	r2, [pc, #756]	@ (8000e9c <MX_GPIO_Init+0x310>)
 8000ba8:	f043 0310 	orr.w	r3, r3, #16
 8000bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bae:	4bbb      	ldr	r3, [pc, #748]	@ (8000e9c <MX_GPIO_Init+0x310>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	f003 0310 	and.w	r3, r3, #16
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4bb8      	ldr	r3, [pc, #736]	@ (8000e9c <MX_GPIO_Init+0x310>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	4ab7      	ldr	r2, [pc, #732]	@ (8000e9c <MX_GPIO_Init+0x310>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc6:	4bb5      	ldr	r3, [pc, #724]	@ (8000e9c <MX_GPIO_Init+0x310>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4bb2      	ldr	r3, [pc, #712]	@ (8000e9c <MX_GPIO_Init+0x310>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd6:	4ab1      	ldr	r2, [pc, #708]	@ (8000e9c <MX_GPIO_Init+0x310>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bde:	4baf      	ldr	r3, [pc, #700]	@ (8000e9c <MX_GPIO_Init+0x310>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	4bac      	ldr	r3, [pc, #688]	@ (8000e9c <MX_GPIO_Init+0x310>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	4aab      	ldr	r2, [pc, #684]	@ (8000e9c <MX_GPIO_Init+0x310>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf6:	4ba9      	ldr	r3, [pc, #676]	@ (8000e9c <MX_GPIO_Init+0x310>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	4ba6      	ldr	r3, [pc, #664]	@ (8000e9c <MX_GPIO_Init+0x310>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	4aa5      	ldr	r2, [pc, #660]	@ (8000e9c <MX_GPIO_Init+0x310>)
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0e:	4ba3      	ldr	r3, [pc, #652]	@ (8000e9c <MX_GPIO_Init+0x310>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000c20:	489f      	ldr	r0, [pc, #636]	@ (8000ea0 <MX_GPIO_Init+0x314>)
 8000c22:	f001 f973 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c30:	f001 f96c 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c34:	2200      	movs	r2, #0
 8000c36:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000c3a:	489a      	ldr	r0, [pc, #616]	@ (8000ea4 <MX_GPIO_Init+0x318>)
 8000c3c:	f001 f966 	bl	8001f0c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000c46:	4898      	ldr	r0, [pc, #608]	@ (8000ea8 <MX_GPIO_Init+0x31c>)
 8000c48:	f001 f960 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c52:	4895      	ldr	r0, [pc, #596]	@ (8000ea8 <MX_GPIO_Init+0x31c>)
 8000c54:	f001 f95a 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000c5e:	4893      	ldr	r0, [pc, #588]	@ (8000eac <MX_GPIO_Init+0x320>)
 8000c60:	f001 f954 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2120      	movs	r1, #32
 8000c68:	488e      	ldr	r0, [pc, #568]	@ (8000ea4 <MX_GPIO_Init+0x318>)
 8000c6a:	f001 f94f 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2101      	movs	r1, #1
 8000c72:	488b      	ldr	r0, [pc, #556]	@ (8000ea0 <MX_GPIO_Init+0x314>)
 8000c74:	f001 f94a 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000c78:	f240 1315 	movw	r3, #277	@ 0x115
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4883      	ldr	r0, [pc, #524]	@ (8000ea0 <MX_GPIO_Init+0x314>)
 8000c92:	f000 ff91 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000c96:	236a      	movs	r3, #106	@ 0x6a
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	487d      	ldr	r0, [pc, #500]	@ (8000ea0 <MX_GPIO_Init+0x314>)
 8000cac:	f000 ff84 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000cb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cb6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4879      	ldr	r0, [pc, #484]	@ (8000eac <MX_GPIO_Init+0x320>)
 8000cc8:	f000 ff76 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000ccc:	233f      	movs	r3, #63	@ 0x3f
 8000cce:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cd0:	230b      	movs	r3, #11
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4873      	ldr	r0, [pc, #460]	@ (8000eac <MX_GPIO_Init+0x320>)
 8000ce0:	f000 ff6a 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d02:	f000 ff59 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000d06:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d22:	f000 ff49 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000d26:	2308      	movs	r3, #8
 8000d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d36:	2301      	movs	r3, #1
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d44:	f000 ff38 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000d48:	2310      	movs	r3, #16
 8000d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d4c:	230b      	movs	r3, #11
 8000d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5e:	f000 ff2b 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000d62:	23e0      	movs	r3, #224	@ 0xe0
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d72:	2305      	movs	r3, #5
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d80:	f000 ff1a 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000d84:	2301      	movs	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d88:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4842      	ldr	r0, [pc, #264]	@ (8000ea4 <MX_GPIO_Init+0x318>)
 8000d9a:	f000 ff0d 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000da2:	230b      	movs	r3, #11
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	483c      	ldr	r0, [pc, #240]	@ (8000ea4 <MX_GPIO_Init+0x318>)
 8000db2:	f000 ff01 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000db6:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000dba:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4835      	ldr	r0, [pc, #212]	@ (8000ea4 <MX_GPIO_Init+0x318>)
 8000dd0:	f000 fef2 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000dd4:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000dd8:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dda:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	482f      	ldr	r0, [pc, #188]	@ (8000ea8 <MX_GPIO_Init+0x31c>)
 8000dec:	f000 fee4 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000df0:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4827      	ldr	r0, [pc, #156]	@ (8000ea8 <MX_GPIO_Init+0x31c>)
 8000e0a:	f000 fed5 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e0e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	4821      	ldr	r0, [pc, #132]	@ (8000eac <MX_GPIO_Init+0x320>)
 8000e28:	f000 fec6 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e2c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e32:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	481a      	ldr	r0, [pc, #104]	@ (8000eac <MX_GPIO_Init+0x320>)
 8000e44:	f000 feb8 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e58:	2305      	movs	r3, #5
 8000e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	4811      	ldr	r0, [pc, #68]	@ (8000ea8 <MX_GPIO_Init+0x31c>)
 8000e64:	f000 fea8 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000e68:	2378      	movs	r3, #120	@ 0x78
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e78:	2307      	movs	r3, #7
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4809      	ldr	r0, [pc, #36]	@ (8000ea8 <MX_GPIO_Init+0x31c>)
 8000e84:	f000 fe98 	bl	8001bb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2017      	movs	r0, #23
 8000e8e:	f000 fd50 	bl	8001932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e92:	2017      	movs	r0, #23
 8000e94:	f000 fd69 	bl	800196a <HAL_NVIC_EnableIRQ>
 8000e98:	e00a      	b.n	8000eb0 <MX_GPIO_Init+0x324>
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48001000 	.word	0x48001000
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	48000c00 	.word	0x48000c00
 8000eac:	48000800 	.word	0x48000800

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2028      	movs	r0, #40	@ 0x28
 8000eb6:	f000 fd3c 	bl	8001932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000eba:	2028      	movs	r0, #40	@ 0x28
 8000ebc:	f000 fd55 	bl	800196a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	@ 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <Error_Handler+0x8>

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <HAL_MspInit+0x44>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ede:	4a0e      	ldr	r2, [pc, #56]	@ (8000f18 <HAL_MspInit+0x44>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <HAL_MspInit+0x44>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <HAL_MspInit+0x44>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef6:	4a08      	ldr	r2, [pc, #32]	@ (8000f18 <HAL_MspInit+0x44>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000efc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_MspInit+0x44>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000

08000f1c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0ac      	sub	sp, #176	@ 0xb0
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2288      	movs	r2, #136	@ 0x88
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 fa55 	bl	80053ec <memset>
  if(DFSDM1_Init == 0)
 8000f42:	4b25      	ldr	r3, [pc, #148]	@ (8000fd8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d142      	bne.n	8000fd0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000f4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 fce8 	bl	8003930 <HAL_RCCEx_PeriphCLKConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000f66:	f7ff ffaf 	bl	8000ec8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fdc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8000fdc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f74:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f76:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f82:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f86:	4a15      	ldr	r2, [pc, #84]	@ (8000fdc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f88:	f043 0310 	orr.w	r3, r3, #16
 8000f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8e:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000f9a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000f9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000fb4:	2306      	movs	r3, #6
 8000fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fba:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4807      	ldr	r0, [pc, #28]	@ (8000fe0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000fc2:	f000 fdf9 	bl	8001bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000fc6:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	4a02      	ldr	r2, [pc, #8]	@ (8000fd8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fce:	6013      	str	r3, [r2, #0]
  }

}
 8000fd0:	bf00      	nop
 8000fd2:	37b0      	adds	r7, #176	@ 0xb0
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200007f4 	.word	0x200007f4
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	48001000 	.word	0x48001000

08000fe4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b0ae      	sub	sp, #184	@ 0xb8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	2288      	movs	r2, #136	@ 0x88
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f004 f9f1 	bl	80053ec <memset>
  if(hi2c->Instance==I2C1)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a42      	ldr	r2, [pc, #264]	@ (8001118 <HAL_I2C_MspInit+0x134>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d13c      	bne.n	800108e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001014:	2340      	movs	r3, #64	@ 0x40
 8001016:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001018:	2300      	movs	r3, #0
 800101a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4618      	mov	r0, r3
 8001022:	f002 fc85 	bl	8003930 <HAL_RCCEx_PeriphCLKConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800102c:	f7ff ff4c 	bl	8000ec8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	4b3a      	ldr	r3, [pc, #232]	@ (800111c <HAL_I2C_MspInit+0x138>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001034:	4a39      	ldr	r2, [pc, #228]	@ (800111c <HAL_I2C_MspInit+0x138>)
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800103c:	4b37      	ldr	r3, [pc, #220]	@ (800111c <HAL_I2C_MspInit+0x138>)
 800103e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	61bb      	str	r3, [r7, #24]
 8001046:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001048:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800104c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001050:	2312      	movs	r3, #18
 8001052:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001062:	2304      	movs	r3, #4
 8001064:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800106c:	4619      	mov	r1, r3
 800106e:	482c      	ldr	r0, [pc, #176]	@ (8001120 <HAL_I2C_MspInit+0x13c>)
 8001070:	f000 fda2 	bl	8001bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <HAL_I2C_MspInit+0x138>)
 8001076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001078:	4a28      	ldr	r2, [pc, #160]	@ (800111c <HAL_I2C_MspInit+0x138>)
 800107a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800107e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <HAL_I2C_MspInit+0x138>)
 8001082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001084:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800108c:	e040      	b.n	8001110 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a24      	ldr	r2, [pc, #144]	@ (8001124 <HAL_I2C_MspInit+0x140>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d13b      	bne.n	8001110 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001098:	2380      	movs	r3, #128	@ 0x80
 800109a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800109c:	2300      	movs	r3, #0
 800109e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 fc43 	bl	8003930 <HAL_RCCEx_PeriphCLKConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80010b0:	f7ff ff0a 	bl	8000ec8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <HAL_I2C_MspInit+0x138>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b8:	4a18      	ldr	r2, [pc, #96]	@ (800111c <HAL_I2C_MspInit+0x138>)
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c0:	4b16      	ldr	r3, [pc, #88]	@ (800111c <HAL_I2C_MspInit+0x138>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80010cc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d4:	2312      	movs	r3, #18
 80010d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010da:	2301      	movs	r3, #1
 80010dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010e6:	2304      	movs	r3, #4
 80010e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010f0:	4619      	mov	r1, r3
 80010f2:	480b      	ldr	r0, [pc, #44]	@ (8001120 <HAL_I2C_MspInit+0x13c>)
 80010f4:	f000 fd60 	bl	8001bb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010f8:	4b08      	ldr	r3, [pc, #32]	@ (800111c <HAL_I2C_MspInit+0x138>)
 80010fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fc:	4a07      	ldr	r2, [pc, #28]	@ (800111c <HAL_I2C_MspInit+0x138>)
 80010fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001102:	6593      	str	r3, [r2, #88]	@ 0x58
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <HAL_I2C_MspInit+0x138>)
 8001106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001108:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	bf00      	nop
 8001112:	37b8      	adds	r7, #184	@ 0xb8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40005400 	.word	0x40005400
 800111c:	40021000 	.word	0x40021000
 8001120:	48000400 	.word	0x48000400
 8001124:	40005800 	.word	0x40005800

08001128 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	@ 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a17      	ldr	r2, [pc, #92]	@ (80011a4 <HAL_QSPI_MspInit+0x7c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d128      	bne.n	800119c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800114a:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <HAL_QSPI_MspInit+0x80>)
 800114c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800114e:	4a16      	ldr	r2, [pc, #88]	@ (80011a8 <HAL_QSPI_MspInit+0x80>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001154:	6513      	str	r3, [r2, #80]	@ 0x50
 8001156:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <HAL_QSPI_MspInit+0x80>)
 8001158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800115a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <HAL_QSPI_MspInit+0x80>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	4a10      	ldr	r2, [pc, #64]	@ (80011a8 <HAL_QSPI_MspInit+0x80>)
 8001168:	f043 0310 	orr.w	r3, r3, #16
 800116c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <HAL_QSPI_MspInit+0x80>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	f003 0310 	and.w	r3, r3, #16
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800117a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800117e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800118c:	230a      	movs	r3, #10
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	4805      	ldr	r0, [pc, #20]	@ (80011ac <HAL_QSPI_MspInit+0x84>)
 8001198:	f000 fd0e 	bl	8001bb8 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	@ 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	a0001000 	.word	0xa0001000
 80011a8:	40021000 	.word	0x40021000
 80011ac:	48001000 	.word	0x48001000

080011b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	@ 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a17      	ldr	r2, [pc, #92]	@ (800122c <HAL_SPI_MspInit+0x7c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d128      	bne.n	8001224 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011d2:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <HAL_SPI_MspInit+0x80>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d6:	4a16      	ldr	r2, [pc, #88]	@ (8001230 <HAL_SPI_MspInit+0x80>)
 80011d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <HAL_SPI_MspInit+0x80>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <HAL_SPI_MspInit+0x80>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	4a10      	ldr	r2, [pc, #64]	@ (8001230 <HAL_SPI_MspInit+0x80>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <HAL_SPI_MspInit+0x80>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001202:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001214:	2306      	movs	r3, #6
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4805      	ldr	r0, [pc, #20]	@ (8001234 <HAL_SPI_MspInit+0x84>)
 8001220:	f000 fcca 	bl	8001bb8 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	@ 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40003c00 	.word	0x40003c00
 8001230:	40021000 	.word	0x40021000
 8001234:	48000800 	.word	0x48000800

08001238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b0ae      	sub	sp, #184	@ 0xb8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	2288      	movs	r2, #136	@ 0x88
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f004 f8c7 	bl	80053ec <memset>
  if(huart->Instance==USART1)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a42      	ldr	r2, [pc, #264]	@ (800136c <HAL_UART_MspInit+0x134>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d13b      	bne.n	80012e0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001268:	2301      	movs	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800126c:	2300      	movs	r3, #0
 800126e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4618      	mov	r0, r3
 8001276:	f002 fb5b 	bl	8003930 <HAL_RCCEx_PeriphCLKConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001280:	f7ff fe22 	bl	8000ec8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001284:	4b3a      	ldr	r3, [pc, #232]	@ (8001370 <HAL_UART_MspInit+0x138>)
 8001286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001288:	4a39      	ldr	r2, [pc, #228]	@ (8001370 <HAL_UART_MspInit+0x138>)
 800128a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800128e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001290:	4b37      	ldr	r3, [pc, #220]	@ (8001370 <HAL_UART_MspInit+0x138>)
 8001292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001294:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129c:	4b34      	ldr	r3, [pc, #208]	@ (8001370 <HAL_UART_MspInit+0x138>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a0:	4a33      	ldr	r2, [pc, #204]	@ (8001370 <HAL_UART_MspInit+0x138>)
 80012a2:	f043 0302 	orr.w	r3, r3, #2
 80012a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a8:	4b31      	ldr	r3, [pc, #196]	@ (8001370 <HAL_UART_MspInit+0x138>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012b4:	23c0      	movs	r3, #192	@ 0xc0
 80012b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012cc:	2307      	movs	r3, #7
 80012ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012d6:	4619      	mov	r1, r3
 80012d8:	4826      	ldr	r0, [pc, #152]	@ (8001374 <HAL_UART_MspInit+0x13c>)
 80012da:	f000 fc6d 	bl	8001bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012de:	e040      	b.n	8001362 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a24      	ldr	r2, [pc, #144]	@ (8001378 <HAL_UART_MspInit+0x140>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d13b      	bne.n	8001362 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012ea:	2304      	movs	r3, #4
 80012ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 fb1a 	bl	8003930 <HAL_RCCEx_PeriphCLKConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001302:	f7ff fde1 	bl	8000ec8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001306:	4b1a      	ldr	r3, [pc, #104]	@ (8001370 <HAL_UART_MspInit+0x138>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130a:	4a19      	ldr	r2, [pc, #100]	@ (8001370 <HAL_UART_MspInit+0x138>)
 800130c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001310:	6593      	str	r3, [r2, #88]	@ 0x58
 8001312:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <HAL_UART_MspInit+0x138>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <HAL_UART_MspInit+0x138>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	4a13      	ldr	r2, [pc, #76]	@ (8001370 <HAL_UART_MspInit+0x138>)
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <HAL_UART_MspInit+0x138>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001336:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800133a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001350:	2307      	movs	r3, #7
 8001352:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001356:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800135a:	4619      	mov	r1, r3
 800135c:	4807      	ldr	r0, [pc, #28]	@ (800137c <HAL_UART_MspInit+0x144>)
 800135e:	f000 fc2b 	bl	8001bb8 <HAL_GPIO_Init>
}
 8001362:	bf00      	nop
 8001364:	37b8      	adds	r7, #184	@ 0xb8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40013800 	.word	0x40013800
 8001370:	40021000 	.word	0x40021000
 8001374:	48000400 	.word	0x48000400
 8001378:	40004800 	.word	0x40004800
 800137c:	48000c00 	.word	0x48000c00

08001380 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0ac      	sub	sp, #176	@ 0xb0
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2288      	movs	r2, #136	@ 0x88
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 f823 	bl	80053ec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013ae:	d17c      	bne.n	80014aa <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013b4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80013b6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80013ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013be:	2301      	movs	r3, #1
 80013c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013c2:	2301      	movs	r3, #1
 80013c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80013c6:	2318      	movs	r3, #24
 80013c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80013ca:	2307      	movs	r3, #7
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013ce:	2302      	movs	r3, #2
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80013d6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013da:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 faa5 	bl	8003930 <HAL_RCCEx_PeriphCLKConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80013ec:	f7ff fd6c 	bl	8000ec8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	4b30      	ldr	r3, [pc, #192]	@ (80014b4 <HAL_PCD_MspInit+0x134>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f4:	4a2f      	ldr	r2, [pc, #188]	@ (80014b4 <HAL_PCD_MspInit+0x134>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fc:	4b2d      	ldr	r3, [pc, #180]	@ (80014b4 <HAL_PCD_MspInit+0x134>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001408:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800140c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001426:	f000 fbc7 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800142a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800142e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001444:	230a      	movs	r3, #10
 8001446:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800144e:	4619      	mov	r1, r3
 8001450:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001454:	f000 fbb0 	bl	8001bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001458:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <HAL_PCD_MspInit+0x134>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145c:	4a15      	ldr	r2, [pc, #84]	@ (80014b4 <HAL_PCD_MspInit+0x134>)
 800145e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001462:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001464:	4b13      	ldr	r3, [pc, #76]	@ (80014b4 <HAL_PCD_MspInit+0x134>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001468:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001470:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <HAL_PCD_MspInit+0x134>)
 8001472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d114      	bne.n	80014a6 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147c:	4b0d      	ldr	r3, [pc, #52]	@ (80014b4 <HAL_PCD_MspInit+0x134>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001480:	4a0c      	ldr	r2, [pc, #48]	@ (80014b4 <HAL_PCD_MspInit+0x134>)
 8001482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001486:	6593      	str	r3, [r2, #88]	@ 0x58
 8001488:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <HAL_PCD_MspInit+0x134>)
 800148a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001494:	f001 fb80 	bl	8002b98 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_PCD_MspInit+0x134>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149c:	4a05      	ldr	r2, [pc, #20]	@ (80014b4 <HAL_PCD_MspInit+0x134>)
 800149e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014a2:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80014a4:	e001      	b.n	80014aa <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80014a6:	f001 fb77 	bl	8002b98 <HAL_PWREx_EnableVddUSB>
}
 80014aa:	bf00      	nop
 80014ac:	37b0      	adds	r7, #176	@ 0xb0
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000

080014b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <NMI_Handler+0x4>

080014c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <HardFault_Handler+0x4>

080014c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <MemManage_Handler+0x4>

080014d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <BusFault_Handler+0x4>

080014d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <UsageFault_Handler+0x4>

080014e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150e:	f000 f8f1 	bl	80016f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}

08001516 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800151a:	2020      	movs	r0, #32
 800151c:	f000 fd0e 	bl	8001f3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001520:	2040      	movs	r0, #64	@ 0x40
 8001522:	f000 fd0b 	bl	8001f3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001526:	2080      	movs	r0, #128	@ 0x80
 8001528:	f000 fd08 	bl	8001f3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800152c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001530:	f000 fd04 	bl	8001f3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800153c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001540:	f000 fcfc 	bl	8001f3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001544:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001548:	f000 fcf8 	bl	8001f3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800154c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001550:	f000 fcf4 	bl	8001f3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001554:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001558:	f000 fcf0 	bl	8001f3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800155c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001560:	f000 fcec 	bl	8001f3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001570:	4a14      	ldr	r2, [pc, #80]	@ (80015c4 <_sbrk+0x5c>)
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <_sbrk+0x60>)
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800157c:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <_sbrk+0x64>)
 8001586:	4a12      	ldr	r2, [pc, #72]	@ (80015d0 <_sbrk+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	429a      	cmp	r2, r3
 8001596:	d207      	bcs.n	80015a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001598:	f003 ff30 	bl	80053fc <__errno>
 800159c:	4603      	mov	r3, r0
 800159e:	220c      	movs	r2, #12
 80015a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	e009      	b.n	80015bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ae:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	4a05      	ldr	r2, [pc, #20]	@ (80015cc <_sbrk+0x64>)
 80015b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20018000 	.word	0x20018000
 80015c8:	00000400 	.word	0x00000400
 80015cc:	200007f8 	.word	0x200007f8
 80015d0:	20000970 	.word	0x20000970

080015d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <SystemInit+0x20>)
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015de:	4a05      	ldr	r2, [pc, #20]	@ (80015f4 <SystemInit+0x20>)
 80015e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001630 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015fc:	f7ff ffea 	bl	80015d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001600:	480c      	ldr	r0, [pc, #48]	@ (8001634 <LoopForever+0x6>)
  ldr r1, =_edata
 8001602:	490d      	ldr	r1, [pc, #52]	@ (8001638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001604:	4a0d      	ldr	r2, [pc, #52]	@ (800163c <LoopForever+0xe>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001618:	4c0a      	ldr	r4, [pc, #40]	@ (8001644 <LoopForever+0x16>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001626:	f003 feef 	bl	8005408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800162a:	f7ff f86d 	bl	8000708 <main>

0800162e <LoopForever>:

LoopForever:
    b LoopForever
 800162e:	e7fe      	b.n	800162e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001630:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800163c:	08005d94 	.word	0x08005d94
  ldr r2, =_sbss
 8001640:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001644:	2000096c 	.word	0x2000096c

08001648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC1_2_IRQHandler>

0800164a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001654:	2003      	movs	r0, #3
 8001656:	f000 f961 	bl	800191c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800165a:	2000      	movs	r0, #0
 800165c:	f000 f80e 	bl	800167c <HAL_InitTick>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	71fb      	strb	r3, [r7, #7]
 800166a:	e001      	b.n	8001670 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800166c:	f7ff fc32 	bl	8000ed4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001670:	79fb      	ldrb	r3, [r7, #7]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001688:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <HAL_InitTick+0x6c>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d023      	beq.n	80016d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001690:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <HAL_InitTick+0x70>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <HAL_InitTick+0x6c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f96d 	bl	8001986 <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10f      	bne.n	80016d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b0f      	cmp	r3, #15
 80016b6:	d809      	bhi.n	80016cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b8:	2200      	movs	r2, #0
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f000 f937 	bl	8001932 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016c4:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <HAL_InitTick+0x74>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e007      	b.n	80016dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e004      	b.n	80016dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
 80016d6:	e001      	b.n	80016dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000008 	.word	0x20000008
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000004 	.word	0x20000004

080016f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <HAL_IncTick+0x20>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_IncTick+0x24>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4413      	add	r3, r2
 8001704:	4a04      	ldr	r2, [pc, #16]	@ (8001718 <HAL_IncTick+0x24>)
 8001706:	6013      	str	r3, [r2, #0]
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000008 	.word	0x20000008
 8001718:	200007fc 	.word	0x200007fc

0800171c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return uwTick;
 8001720:	4b03      	ldr	r3, [pc, #12]	@ (8001730 <HAL_GetTick+0x14>)
 8001722:	681b      	ldr	r3, [r3, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	200007fc 	.word	0x200007fc

08001734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800173c:	f7ff ffee 	bl	800171c <HAL_GetTick>
 8001740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174c:	d005      	beq.n	800175a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800174e:	4b0a      	ldr	r3, [pc, #40]	@ (8001778 <HAL_Delay+0x44>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4413      	add	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800175a:	bf00      	nop
 800175c:	f7ff ffde 	bl	800171c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	429a      	cmp	r2, r3
 800176a:	d8f7      	bhi.n	800175c <HAL_Delay+0x28>
  {
  }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000008 	.word	0x20000008

0800177c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001798:	4013      	ands	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ae:	4a04      	ldr	r2, [pc, #16]	@ (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	60d3      	str	r3, [r2, #12]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c8:	4b04      	ldr	r3, [pc, #16]	@ (80017dc <__NVIC_GetPriorityGrouping+0x18>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	f003 0307 	and.w	r3, r3, #7
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	db0b      	blt.n	800180a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	f003 021f 	and.w	r2, r3, #31
 80017f8:	4907      	ldr	r1, [pc, #28]	@ (8001818 <__NVIC_EnableIRQ+0x38>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	2001      	movs	r0, #1
 8001802:	fa00 f202 	lsl.w	r2, r0, r2
 8001806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000e100 	.word	0xe000e100

0800181c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db0a      	blt.n	8001846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	490c      	ldr	r1, [pc, #48]	@ (8001868 <__NVIC_SetPriority+0x4c>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001844:	e00a      	b.n	800185c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4908      	ldr	r1, [pc, #32]	@ (800186c <__NVIC_SetPriority+0x50>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3b04      	subs	r3, #4
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	440b      	add	r3, r1
 800185a:	761a      	strb	r2, [r3, #24]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000e100 	.word	0xe000e100
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	@ 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f1c3 0307 	rsb	r3, r3, #7
 800188a:	2b04      	cmp	r3, #4
 800188c:	bf28      	it	cs
 800188e:	2304      	movcs	r3, #4
 8001890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3304      	adds	r3, #4
 8001896:	2b06      	cmp	r3, #6
 8001898:	d902      	bls.n	80018a0 <NVIC_EncodePriority+0x30>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3b03      	subs	r3, #3
 800189e:	e000      	b.n	80018a2 <NVIC_EncodePriority+0x32>
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	f04f 32ff 	mov.w	r2, #4294967295
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	4313      	orrs	r3, r2
         );
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3724      	adds	r7, #36	@ 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018e8:	d301      	bcc.n	80018ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00f      	b.n	800190e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001918 <SysTick_Config+0x40>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f6:	210f      	movs	r1, #15
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	f7ff ff8e 	bl	800181c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001900:	4b05      	ldr	r3, [pc, #20]	@ (8001918 <SysTick_Config+0x40>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001906:	4b04      	ldr	r3, [pc, #16]	@ (8001918 <SysTick_Config+0x40>)
 8001908:	2207      	movs	r2, #7
 800190a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	e000e010 	.word	0xe000e010

0800191c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ff29 	bl	800177c <__NVIC_SetPriorityGrouping>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001944:	f7ff ff3e 	bl	80017c4 <__NVIC_GetPriorityGrouping>
 8001948:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	68b9      	ldr	r1, [r7, #8]
 800194e:	6978      	ldr	r0, [r7, #20]
 8001950:	f7ff ff8e 	bl	8001870 <NVIC_EncodePriority>
 8001954:	4602      	mov	r2, r0
 8001956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff5d 	bl	800181c <__NVIC_SetPriority>
}
 8001962:	bf00      	nop
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff31 	bl	80017e0 <__NVIC_EnableIRQ>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff ffa2 	bl	80018d8 <SysTick_Config>
 8001994:	4603      	mov	r3, r0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e0ac      	b.n	8001b0c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f8b2 	bl	8001b20 <DFSDM_GetChannelFromInstance>
 80019bc:	4603      	mov	r3, r0
 80019be:	4a55      	ldr	r2, [pc, #340]	@ (8001b14 <HAL_DFSDM_ChannelInit+0x174>)
 80019c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e09f      	b.n	8001b0c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff faa5 	bl	8000f1c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80019d2:	4b51      	ldr	r3, [pc, #324]	@ (8001b18 <HAL_DFSDM_ChannelInit+0x178>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	3301      	adds	r3, #1
 80019d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001b18 <HAL_DFSDM_ChannelInit+0x178>)
 80019da:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80019dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001b18 <HAL_DFSDM_ChannelInit+0x178>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d125      	bne.n	8001a30 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80019e4:	4b4d      	ldr	r3, [pc, #308]	@ (8001b1c <HAL_DFSDM_ChannelInit+0x17c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a4c      	ldr	r2, [pc, #304]	@ (8001b1c <HAL_DFSDM_ChannelInit+0x17c>)
 80019ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80019ee:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80019f0:	4b4a      	ldr	r3, [pc, #296]	@ (8001b1c <HAL_DFSDM_ChannelInit+0x17c>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4948      	ldr	r1, [pc, #288]	@ (8001b1c <HAL_DFSDM_ChannelInit+0x17c>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80019fe:	4b47      	ldr	r3, [pc, #284]	@ (8001b1c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a46      	ldr	r2, [pc, #280]	@ (8001b1c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a04:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001a08:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	791b      	ldrb	r3, [r3, #4]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d108      	bne.n	8001a24 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001a12:	4b42      	ldr	r3, [pc, #264]	@ (8001b1c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	041b      	lsls	r3, r3, #16
 8001a1e:	493f      	ldr	r1, [pc, #252]	@ (8001b1c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001a24:	4b3d      	ldr	r3, [pc, #244]	@ (8001b1c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a3c      	ldr	r2, [pc, #240]	@ (8001b1c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a2e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001a3e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6819      	ldr	r1, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a4e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a54:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 020f 	bic.w	r2, r2, #15
 8001a6c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6819      	ldr	r1, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001a94:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6899      	ldr	r1, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f002 0207 	and.w	r2, r2, #7
 8001ac0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001acc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001aec:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 f810 	bl	8001b20 <DFSDM_GetChannelFromInstance>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4904      	ldr	r1, [pc, #16]	@ (8001b14 <HAL_DFSDM_ChannelInit+0x174>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000804 	.word	0x20000804
 8001b18:	20000800 	.word	0x20000800
 8001b1c:	40016000 	.word	0x40016000

08001b20 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b9c <DFSDM_GetChannelFromInstance+0x7c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d102      	bne.n	8001b36 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	e02b      	b.n	8001b8e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a19      	ldr	r2, [pc, #100]	@ (8001ba0 <DFSDM_GetChannelFromInstance+0x80>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d102      	bne.n	8001b44 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	e024      	b.n	8001b8e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a17      	ldr	r2, [pc, #92]	@ (8001ba4 <DFSDM_GetChannelFromInstance+0x84>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d102      	bne.n	8001b52 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	e01d      	b.n	8001b8e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a14      	ldr	r2, [pc, #80]	@ (8001ba8 <DFSDM_GetChannelFromInstance+0x88>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d102      	bne.n	8001b60 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	e016      	b.n	8001b8e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a12      	ldr	r2, [pc, #72]	@ (8001bac <DFSDM_GetChannelFromInstance+0x8c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d102      	bne.n	8001b6e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001b68:	2305      	movs	r3, #5
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	e00f      	b.n	8001b8e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb0 <DFSDM_GetChannelFromInstance+0x90>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d102      	bne.n	8001b7c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001b76:	2306      	movs	r3, #6
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	e008      	b.n	8001b8e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb4 <DFSDM_GetChannelFromInstance+0x94>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d102      	bne.n	8001b8a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001b84:	2307      	movs	r3, #7
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	e001      	b.n	8001b8e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	40016000 	.word	0x40016000
 8001ba0:	40016020 	.word	0x40016020
 8001ba4:	40016040 	.word	0x40016040
 8001ba8:	40016080 	.word	0x40016080
 8001bac:	400160a0 	.word	0x400160a0
 8001bb0:	400160c0 	.word	0x400160c0
 8001bb4:	400160e0 	.word	0x400160e0

08001bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc6:	e17f      	b.n	8001ec8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2101      	movs	r1, #1
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8171 	beq.w	8001ec2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d005      	beq.n	8001bf8 <HAL_GPIO_Init+0x40>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d130      	bne.n	8001c5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c2e:	2201      	movs	r2, #1
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	091b      	lsrs	r3, r3, #4
 8001c44:	f003 0201 	and.w	r2, r3, #1
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d118      	bne.n	8001c98 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	08db      	lsrs	r3, r3, #3
 8001c82:	f003 0201 	and.w	r2, r3, #1
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d017      	beq.n	8001cd4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d123      	bne.n	8001d28 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	08da      	lsrs	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3208      	adds	r2, #8
 8001ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	08da      	lsrs	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3208      	adds	r2, #8
 8001d22:	6939      	ldr	r1, [r7, #16]
 8001d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0203 	and.w	r2, r3, #3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80ac 	beq.w	8001ec2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ee8 <HAL_GPIO_Init+0x330>)
 8001d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d6e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ee8 <HAL_GPIO_Init+0x330>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d76:	4b5c      	ldr	r3, [pc, #368]	@ (8001ee8 <HAL_GPIO_Init+0x330>)
 8001d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d82:	4a5a      	ldr	r2, [pc, #360]	@ (8001eec <HAL_GPIO_Init+0x334>)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	089b      	lsrs	r3, r3, #2
 8001d88:	3302      	adds	r3, #2
 8001d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	220f      	movs	r2, #15
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dac:	d025      	beq.n	8001dfa <HAL_GPIO_Init+0x242>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4f      	ldr	r2, [pc, #316]	@ (8001ef0 <HAL_GPIO_Init+0x338>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d01f      	beq.n	8001df6 <HAL_GPIO_Init+0x23e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4e      	ldr	r2, [pc, #312]	@ (8001ef4 <HAL_GPIO_Init+0x33c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d019      	beq.n	8001df2 <HAL_GPIO_Init+0x23a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ef8 <HAL_GPIO_Init+0x340>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_GPIO_Init+0x236>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4c      	ldr	r2, [pc, #304]	@ (8001efc <HAL_GPIO_Init+0x344>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00d      	beq.n	8001dea <HAL_GPIO_Init+0x232>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a4b      	ldr	r2, [pc, #300]	@ (8001f00 <HAL_GPIO_Init+0x348>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d007      	beq.n	8001de6 <HAL_GPIO_Init+0x22e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4a      	ldr	r2, [pc, #296]	@ (8001f04 <HAL_GPIO_Init+0x34c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_GPIO_Init+0x22a>
 8001dde:	2306      	movs	r3, #6
 8001de0:	e00c      	b.n	8001dfc <HAL_GPIO_Init+0x244>
 8001de2:	2307      	movs	r3, #7
 8001de4:	e00a      	b.n	8001dfc <HAL_GPIO_Init+0x244>
 8001de6:	2305      	movs	r3, #5
 8001de8:	e008      	b.n	8001dfc <HAL_GPIO_Init+0x244>
 8001dea:	2304      	movs	r3, #4
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x244>
 8001dee:	2303      	movs	r3, #3
 8001df0:	e004      	b.n	8001dfc <HAL_GPIO_Init+0x244>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e002      	b.n	8001dfc <HAL_GPIO_Init+0x244>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_GPIO_Init+0x244>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	f002 0203 	and.w	r2, r2, #3
 8001e02:	0092      	lsls	r2, r2, #2
 8001e04:	4093      	lsls	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e0c:	4937      	ldr	r1, [pc, #220]	@ (8001eec <HAL_GPIO_Init+0x334>)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	3302      	adds	r3, #2
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f08 <HAL_GPIO_Init+0x350>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e3e:	4a32      	ldr	r2, [pc, #200]	@ (8001f08 <HAL_GPIO_Init+0x350>)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e44:	4b30      	ldr	r3, [pc, #192]	@ (8001f08 <HAL_GPIO_Init+0x350>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e68:	4a27      	ldr	r2, [pc, #156]	@ (8001f08 <HAL_GPIO_Init+0x350>)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e6e:	4b26      	ldr	r3, [pc, #152]	@ (8001f08 <HAL_GPIO_Init+0x350>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e92:	4a1d      	ldr	r2, [pc, #116]	@ (8001f08 <HAL_GPIO_Init+0x350>)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e98:	4b1b      	ldr	r3, [pc, #108]	@ (8001f08 <HAL_GPIO_Init+0x350>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ebc:	4a12      	ldr	r2, [pc, #72]	@ (8001f08 <HAL_GPIO_Init+0x350>)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f47f ae78 	bne.w	8001bc8 <HAL_GPIO_Init+0x10>
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	371c      	adds	r7, #28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40010000 	.word	0x40010000
 8001ef0:	48000400 	.word	0x48000400
 8001ef4:	48000800 	.word	0x48000800
 8001ef8:	48000c00 	.word	0x48000c00
 8001efc:	48001000 	.word	0x48001000
 8001f00:	48001400 	.word	0x48001400
 8001f04:	48001800 	.word	0x48001800
 8001f08:	40010400 	.word	0x40010400

08001f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	807b      	strh	r3, [r7, #2]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f1c:	787b      	ldrb	r3, [r7, #1]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f22:	887a      	ldrh	r2, [r7, #2]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f28:	e002      	b.n	8001f30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f46:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d006      	beq.n	8001f60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f52:	4a05      	ldr	r2, [pc, #20]	@ (8001f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 f806 	bl	8001f6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40010400 	.word	0x40010400

08001f6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e08d      	b.n	80020b0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d106      	bne.n	8001fae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff f81b 	bl	8000fe4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2224      	movs	r2, #36	@ 0x24
 8001fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0201 	bic.w	r2, r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fd2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fe2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d107      	bne.n	8001ffc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	e006      	b.n	800200a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002008:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d108      	bne.n	8002024 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	e007      	b.n	8002034 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002032:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002042:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002046:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002056:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69d9      	ldr	r1, [r3, #28]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1a      	ldr	r2, [r3, #32]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0201 	orr.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	461a      	mov	r2, r3
 80020c4:	460b      	mov	r3, r1
 80020c6:	817b      	strh	r3, [r7, #10]
 80020c8:	4613      	mov	r3, r2
 80020ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	f040 80fd 	bne.w	80022d4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_I2C_Master_Transmit+0x30>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e0f6      	b.n	80022d6 <HAL_I2C_Master_Transmit+0x21e>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020f0:	f7ff fb14 	bl	800171c <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2319      	movs	r3, #25
 80020fc:	2201      	movs	r2, #1
 80020fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f914 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0e1      	b.n	80022d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2221      	movs	r2, #33	@ 0x21
 8002116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2210      	movs	r2, #16
 800211e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	893a      	ldrh	r2, [r7, #8]
 8002132:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213e:	b29b      	uxth	r3, r3
 8002140:	2bff      	cmp	r3, #255	@ 0xff
 8002142:	d906      	bls.n	8002152 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	22ff      	movs	r2, #255	@ 0xff
 8002148:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800214a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	e007      	b.n	8002162 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800215c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002160:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002166:	2b00      	cmp	r3, #0
 8002168:	d024      	beq.n	80021b4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	3301      	adds	r3, #1
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	8979      	ldrh	r1, [r7, #10]
 80021a6:	4b4e      	ldr	r3, [pc, #312]	@ (80022e0 <HAL_I2C_Master_Transmit+0x228>)
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 fa83 	bl	80026b8 <I2C_TransferConfig>
 80021b2:	e066      	b.n	8002282 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	8979      	ldrh	r1, [r7, #10]
 80021bc:	4b48      	ldr	r3, [pc, #288]	@ (80022e0 <HAL_I2C_Master_Transmit+0x228>)
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 fa78 	bl	80026b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80021c8:	e05b      	b.n	8002282 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	6a39      	ldr	r1, [r7, #32]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f907 	bl	80023e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e07b      	b.n	80022d6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	781a      	ldrb	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d034      	beq.n	8002282 <HAL_I2C_Master_Transmit+0x1ca>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	d130      	bne.n	8002282 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	2200      	movs	r2, #0
 8002228:	2180      	movs	r1, #128	@ 0x80
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f880 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e04d      	b.n	80022d6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223e:	b29b      	uxth	r3, r3
 8002240:	2bff      	cmp	r3, #255	@ 0xff
 8002242:	d90e      	bls.n	8002262 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	22ff      	movs	r2, #255	@ 0xff
 8002248:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800224e:	b2da      	uxtb	r2, r3
 8002250:	8979      	ldrh	r1, [r7, #10]
 8002252:	2300      	movs	r3, #0
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 fa2c 	bl	80026b8 <I2C_TransferConfig>
 8002260:	e00f      	b.n	8002282 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002270:	b2da      	uxtb	r2, r3
 8002272:	8979      	ldrh	r1, [r7, #10]
 8002274:	2300      	movs	r3, #0
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 fa1b 	bl	80026b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d19e      	bne.n	80021ca <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	6a39      	ldr	r1, [r7, #32]
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 f8ed 	bl	8002470 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e01a      	b.n	80022d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2220      	movs	r2, #32
 80022a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4b0c      	ldr	r3, [pc, #48]	@ (80022e4 <HAL_I2C_Master_Transmit+0x22c>)
 80022b4:	400b      	ands	r3, r1
 80022b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	e000      	b.n	80022d6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80022d4:	2302      	movs	r3, #2
  }
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	80002000 	.word	0x80002000
 80022e4:	fe00e800 	.word	0xfe00e800

080022e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d103      	bne.n	8002306 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2200      	movs	r2, #0
 8002304:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d007      	beq.n	8002324 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	619a      	str	r2, [r3, #24]
  }
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002340:	e03b      	b.n	80023ba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	6839      	ldr	r1, [r7, #0]
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f8d6 	bl	80024f8 <I2C_IsErrorOccurred>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e041      	b.n	80023da <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	d02d      	beq.n	80023ba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800235e:	f7ff f9dd 	bl	800171c <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d302      	bcc.n	8002374 <I2C_WaitOnFlagUntilTimeout+0x44>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d122      	bne.n	80023ba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	4013      	ands	r3, r2
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	429a      	cmp	r2, r3
 8002382:	bf0c      	ite	eq
 8002384:	2301      	moveq	r3, #1
 8002386:	2300      	movne	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	429a      	cmp	r2, r3
 8002390:	d113      	bne.n	80023ba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	f043 0220 	orr.w	r2, r3, #32
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2220      	movs	r2, #32
 80023a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e00f      	b.n	80023da <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699a      	ldr	r2, [r3, #24]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4013      	ands	r3, r2
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	bf0c      	ite	eq
 80023ca:	2301      	moveq	r3, #1
 80023cc:	2300      	movne	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d0b4      	beq.n	8002342 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023ee:	e033      	b.n	8002458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f87f 	bl	80024f8 <I2C_IsErrorOccurred>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e031      	b.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240a:	d025      	beq.n	8002458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800240c:	f7ff f986 	bl	800171c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	429a      	cmp	r2, r3
 800241a:	d302      	bcc.n	8002422 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d11a      	bne.n	8002458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b02      	cmp	r3, #2
 800242e:	d013      	beq.n	8002458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002434:	f043 0220 	orr.w	r2, r3, #32
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e007      	b.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b02      	cmp	r3, #2
 8002464:	d1c4      	bne.n	80023f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800247c:	e02f      	b.n	80024de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f838 	bl	80024f8 <I2C_IsErrorOccurred>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e02d      	b.n	80024ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002492:	f7ff f943 	bl	800171c <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d302      	bcc.n	80024a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d11a      	bne.n	80024de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	d013      	beq.n	80024de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ba:	f043 0220 	orr.w	r2, r3, #32
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e007      	b.n	80024ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d1c8      	bne.n	800247e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	@ 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	d068      	beq.n	80025f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2210      	movs	r2, #16
 800252a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800252c:	e049      	b.n	80025c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d045      	beq.n	80025c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002536:	f7ff f8f1 	bl	800171c <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	429a      	cmp	r2, r3
 8002544:	d302      	bcc.n	800254c <I2C_IsErrorOccurred+0x54>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d13a      	bne.n	80025c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002556:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800255e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800256a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800256e:	d121      	bne.n	80025b4 <I2C_IsErrorOccurred+0xbc>
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002576:	d01d      	beq.n	80025b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002578:	7cfb      	ldrb	r3, [r7, #19]
 800257a:	2b20      	cmp	r3, #32
 800257c:	d01a      	beq.n	80025b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800258c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800258e:	f7ff f8c5 	bl	800171c <HAL_GetTick>
 8002592:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002594:	e00e      	b.n	80025b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002596:	f7ff f8c1 	bl	800171c <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b19      	cmp	r3, #25
 80025a2:	d907      	bls.n	80025b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	f043 0320 	orr.w	r3, r3, #32
 80025aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80025b2:	e006      	b.n	80025c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f003 0320 	and.w	r3, r3, #32
 80025be:	2b20      	cmp	r3, #32
 80025c0:	d1e9      	bne.n	8002596 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d003      	beq.n	80025d8 <I2C_IsErrorOccurred+0xe0>
 80025d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0aa      	beq.n	800252e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d103      	bne.n	80025e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2220      	movs	r2, #32
 80025e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00b      	beq.n	8002620 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002618:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00b      	beq.n	8002642 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	f043 0308 	orr.w	r3, r3, #8
 8002630:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800263a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00b      	beq.n	8002664 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	f043 0302 	orr.w	r3, r3, #2
 8002652:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800265c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002664:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002668:	2b00      	cmp	r3, #0
 800266a:	d01c      	beq.n	80026a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f7ff fe3b 	bl	80022e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b0d      	ldr	r3, [pc, #52]	@ (80026b4 <I2C_IsErrorOccurred+0x1bc>)
 800267e:	400b      	ands	r3, r1
 8002680:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	431a      	orrs	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80026a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3728      	adds	r7, #40	@ 0x28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	fe00e800 	.word	0xfe00e800

080026b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	460b      	mov	r3, r1
 80026c4:	817b      	strh	r3, [r7, #10]
 80026c6:	4613      	mov	r3, r2
 80026c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026ca:	897b      	ldrh	r3, [r7, #10]
 80026cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026d0:	7a7b      	ldrb	r3, [r7, #9]
 80026d2:	041b      	lsls	r3, r3, #16
 80026d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	0d5b      	lsrs	r3, r3, #21
 80026f2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80026f6:	4b08      	ldr	r3, [pc, #32]	@ (8002718 <I2C_TransferConfig+0x60>)
 80026f8:	430b      	orrs	r3, r1
 80026fa:	43db      	mvns	r3, r3
 80026fc:	ea02 0103 	and.w	r1, r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	430a      	orrs	r2, r1
 8002708:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800270a:	bf00      	nop
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	03ff63ff 	.word	0x03ff63ff

0800271c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b20      	cmp	r3, #32
 8002730:	d138      	bne.n	80027a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800273c:	2302      	movs	r3, #2
 800273e:	e032      	b.n	80027a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2224      	movs	r2, #36	@ 0x24
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800276e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e000      	b.n	80027a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027a4:	2302      	movs	r3, #2
  }
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b085      	sub	sp, #20
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d139      	bne.n	800283c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e033      	b.n	800283e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2224      	movs	r2, #36	@ 0x24
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002804:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	021b      	lsls	r3, r3, #8
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	e000      	b.n	800283e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800283c:	2302      	movs	r3, #2
  }
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b086      	sub	sp, #24
 800284e:	af02      	add	r7, sp, #8
 8002850:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e101      	b.n	8002a60 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe fd85 	bl	8001380 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2203      	movs	r2, #3
 800287a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f002 fb0f 	bl	8004eac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	7c1a      	ldrb	r2, [r3, #16]
 8002896:	f88d 2000 	strb.w	r2, [sp]
 800289a:	3304      	adds	r3, #4
 800289c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800289e:	f002 fad8 	bl	8004e52 <USB_CoreInit>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0d5      	b.n	8002a60 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2100      	movs	r1, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f002 fb07 	bl	8004ece <USB_SetCurrentMode>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d005      	beq.n	80028d2 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e0c6      	b.n	8002a60 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	73fb      	strb	r3, [r7, #15]
 80028d6:	e04a      	b.n	800296e <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	3315      	adds	r3, #21
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	3314      	adds	r3, #20
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	b298      	uxth	r0, r3
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	332e      	adds	r3, #46	@ 0x2e
 8002914:	4602      	mov	r2, r0
 8002916:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	3318      	adds	r3, #24
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	331c      	adds	r3, #28
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3320      	adds	r3, #32
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3324      	adds	r3, #36	@ 0x24
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	3301      	adds	r3, #1
 800296c:	73fb      	strb	r3, [r7, #15]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	791b      	ldrb	r3, [r3, #4]
 8002972:	7bfa      	ldrb	r2, [r7, #15]
 8002974:	429a      	cmp	r2, r3
 8002976:	d3af      	bcc.n	80028d8 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	e044      	b.n	8002a08 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002994:	7bfa      	ldrb	r2, [r7, #15]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029aa:	7bfa      	ldrb	r2, [r7, #15]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029d6:	7bfa      	ldrb	r2, [r7, #15]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	3301      	adds	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	791b      	ldrb	r3, [r3, #4]
 8002a0c:	7bfa      	ldrb	r2, [r7, #15]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d3b5      	bcc.n	800297e <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7c1a      	ldrb	r2, [r3, #16]
 8002a1a:	f88d 2000 	strb.w	r2, [sp]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a22:	f002 faa1 	bl	8004f68 <USB_DevInit>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e013      	b.n	8002a60 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	7b1b      	ldrb	r3, [r3, #12]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d102      	bne.n	8002a54 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f80a 	bl	8002a68 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f002 fc46 	bl	80052ea <USB_DevDisconnect>

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a9a:	f043 0303 	orr.w	r3, r3, #3
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ab4:	4b05      	ldr	r3, [pc, #20]	@ (8002acc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a04      	ldr	r2, [pc, #16]	@ (8002acc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002aba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002abe:	6013      	str	r3, [r2, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40007000 	.word	0x40007000

08002ad0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ad4:	4b04      	ldr	r3, [pc, #16]	@ (8002ae8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40007000 	.word	0x40007000

08002aec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002afa:	d130      	bne.n	8002b5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002afc:	4b23      	ldr	r3, [pc, #140]	@ (8002b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b08:	d038      	beq.n	8002b7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b0a:	4b20      	ldr	r3, [pc, #128]	@ (8002b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b12:	4a1e      	ldr	r2, [pc, #120]	@ (8002b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2232      	movs	r2, #50	@ 0x32
 8002b20:	fb02 f303 	mul.w	r3, r2, r3
 8002b24:	4a1b      	ldr	r2, [pc, #108]	@ (8002b94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	0c9b      	lsrs	r3, r3, #18
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b30:	e002      	b.n	8002b38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b38:	4b14      	ldr	r3, [pc, #80]	@ (8002b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b44:	d102      	bne.n	8002b4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f2      	bne.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b58:	d110      	bne.n	8002b7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e00f      	b.n	8002b7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b6a:	d007      	beq.n	8002b7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b6c:	4b07      	ldr	r3, [pc, #28]	@ (8002b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b74:	4a05      	ldr	r2, [pc, #20]	@ (8002b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	20000000 	.word	0x20000000
 8002b94:	431bde83 	.word	0x431bde83

08002b98 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002b9c:	4b05      	ldr	r3, [pc, #20]	@ (8002bb4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	4a04      	ldr	r2, [pc, #16]	@ (8002bb4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002ba2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ba6:	6053      	str	r3, [r2, #4]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40007000 	.word	0x40007000

08002bb8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002bc0:	f7fe fdac 	bl	800171c <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e063      	b.n	8002c98 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10b      	bne.n	8002bf4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7fe fa9f 	bl	8001128 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002bea:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f858 	bl	8002ca4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	021a      	lsls	r2, r3, #8
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	2120      	movs	r1, #32
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f850 	bl	8002cc0 <QSPI_WaitFlagStateUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002c24:	7afb      	ldrb	r3, [r7, #11]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d131      	bne.n	8002c8e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002c34:	f023 0310 	bic.w	r3, r3, #16
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6852      	ldr	r2, [r2, #4]
 8002c3c:	0611      	lsls	r1, r2, #24
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68d2      	ldr	r2, [r2, #12]
 8002c42:	4311      	orrs	r1, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	4b13      	ldr	r3, [pc, #76]	@ (8002ca0 <HAL_QSPI_Init+0xe8>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6912      	ldr	r2, [r2, #16]
 8002c5a:	0411      	lsls	r1, r2, #16
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6952      	ldr	r2, [r2, #20]
 8002c60:	4311      	orrs	r1, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6992      	ldr	r2, [r2, #24]
 8002c66:	4311      	orrs	r1, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8002c96:	7afb      	ldrb	r3, [r7, #11]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	ffe0f8fe 	.word	0xffe0f8fe

08002ca4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002cd0:	e01a      	b.n	8002d08 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd8:	d016      	beq.n	8002d08 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cda:	f7fe fd1f 	bl	800171c <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d302      	bcc.n	8002cf0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10b      	bne.n	8002d08 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfc:	f043 0201 	orr.w	r2, r3, #1
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e00e      	b.n	8002d26 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	bf14      	ite	ne
 8002d16:	2301      	movne	r3, #1
 8002d18:	2300      	moveq	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d1d6      	bne.n	8002cd2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e3ca      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d42:	4b97      	ldr	r3, [pc, #604]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d4c:	4b94      	ldr	r3, [pc, #592]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 80e4 	beq.w	8002f2c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <HAL_RCC_OscConfig+0x4a>
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	2b0c      	cmp	r3, #12
 8002d6e:	f040 808b 	bne.w	8002e88 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	f040 8087 	bne.w	8002e88 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d7a:	4b89      	ldr	r3, [pc, #548]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_RCC_OscConfig+0x62>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e3a2      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1a      	ldr	r2, [r3, #32]
 8002d96:	4b82      	ldr	r3, [pc, #520]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d004      	beq.n	8002dac <HAL_RCC_OscConfig+0x7c>
 8002da2:	4b7f      	ldr	r3, [pc, #508]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002daa:	e005      	b.n	8002db8 <HAL_RCC_OscConfig+0x88>
 8002dac:	4b7c      	ldr	r3, [pc, #496]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d223      	bcs.n	8002e04 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fd55 	bl	8003870 <RCC_SetFlashLatencyFromMSIRange>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e383      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dd0:	4b73      	ldr	r3, [pc, #460]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a72      	ldr	r2, [pc, #456]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002dd6:	f043 0308 	orr.w	r3, r3, #8
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b70      	ldr	r3, [pc, #448]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	496d      	ldr	r1, [pc, #436]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dee:	4b6c      	ldr	r3, [pc, #432]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	4968      	ldr	r1, [pc, #416]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
 8002e02:	e025      	b.n	8002e50 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e04:	4b66      	ldr	r3, [pc, #408]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a65      	ldr	r2, [pc, #404]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002e0a:	f043 0308 	orr.w	r3, r3, #8
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	4b63      	ldr	r3, [pc, #396]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	4960      	ldr	r1, [pc, #384]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e22:	4b5f      	ldr	r3, [pc, #380]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	495b      	ldr	r1, [pc, #364]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 fd15 	bl	8003870 <RCC_SetFlashLatencyFromMSIRange>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e343      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e50:	f000 fc4a 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b52      	ldr	r3, [pc, #328]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	091b      	lsrs	r3, r3, #4
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	4950      	ldr	r1, [pc, #320]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6c:	4a4e      	ldr	r2, [pc, #312]	@ (8002fa8 <HAL_RCC_OscConfig+0x278>)
 8002e6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e70:	4b4e      	ldr	r3, [pc, #312]	@ (8002fac <HAL_RCC_OscConfig+0x27c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe fc01 	bl	800167c <HAL_InitTick>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d052      	beq.n	8002f2a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	e327      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d032      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e90:	4b43      	ldr	r3, [pc, #268]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a42      	ldr	r2, [pc, #264]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fc3e 	bl	800171c <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ea4:	f7fe fc3a 	bl	800171c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e310      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eb6:	4b3a      	ldr	r3, [pc, #232]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ec2:	4b37      	ldr	r3, [pc, #220]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a36      	ldr	r2, [pc, #216]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002ec8:	f043 0308 	orr.w	r3, r3, #8
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	4b34      	ldr	r3, [pc, #208]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4931      	ldr	r1, [pc, #196]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ee0:	4b2f      	ldr	r3, [pc, #188]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	492c      	ldr	r1, [pc, #176]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
 8002ef4:	e01a      	b.n	8002f2c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a29      	ldr	r2, [pc, #164]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f02:	f7fe fc0b 	bl	800171c <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f0a:	f7fe fc07 	bl	800171c <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e2dd      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f1c:	4b20      	ldr	r3, [pc, #128]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f0      	bne.n	8002f0a <HAL_RCC_OscConfig+0x1da>
 8002f28:	e000      	b.n	8002f2c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d074      	beq.n	8003022 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d005      	beq.n	8002f4a <HAL_RCC_OscConfig+0x21a>
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	2b0c      	cmp	r3, #12
 8002f42:	d10e      	bne.n	8002f62 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d10b      	bne.n	8002f62 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4a:	4b15      	ldr	r3, [pc, #84]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d064      	beq.n	8003020 <HAL_RCC_OscConfig+0x2f0>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d160      	bne.n	8003020 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e2ba      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f6a:	d106      	bne.n	8002f7a <HAL_RCC_OscConfig+0x24a>
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0b      	ldr	r2, [pc, #44]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	e026      	b.n	8002fc8 <HAL_RCC_OscConfig+0x298>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f82:	d115      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x280>
 8002f84:	4b06      	ldr	r3, [pc, #24]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a05      	ldr	r2, [pc, #20]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002f8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	4b03      	ldr	r3, [pc, #12]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a02      	ldr	r2, [pc, #8]	@ (8002fa0 <HAL_RCC_OscConfig+0x270>)
 8002f96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	e014      	b.n	8002fc8 <HAL_RCC_OscConfig+0x298>
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	08005d08 	.word	0x08005d08
 8002fa8:	20000000 	.word	0x20000000
 8002fac:	20000004 	.word	0x20000004
 8002fb0:	4ba0      	ldr	r3, [pc, #640]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a9f      	ldr	r2, [pc, #636]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 8002fb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	4b9d      	ldr	r3, [pc, #628]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a9c      	ldr	r2, [pc, #624]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 8002fc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d013      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fba4 	bl	800171c <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7fe fba0 	bl	800171c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	@ 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e276      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fea:	4b92      	ldr	r3, [pc, #584]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x2a8>
 8002ff6:	e014      	b.n	8003022 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fb90 	bl	800171c <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003000:	f7fe fb8c 	bl	800171c <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	@ 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e262      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003012:	4b88      	ldr	r3, [pc, #544]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x2d0>
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d060      	beq.n	80030f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b04      	cmp	r3, #4
 8003032:	d005      	beq.n	8003040 <HAL_RCC_OscConfig+0x310>
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b0c      	cmp	r3, #12
 8003038:	d119      	bne.n	800306e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d116      	bne.n	800306e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003040:	4b7c      	ldr	r3, [pc, #496]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_RCC_OscConfig+0x328>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e23f      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003058:	4b76      	ldr	r3, [pc, #472]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	4973      	ldr	r1, [pc, #460]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800306c:	e040      	b.n	80030f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d023      	beq.n	80030be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003076:	4b6f      	ldr	r3, [pc, #444]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a6e      	ldr	r2, [pc, #440]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 800307c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003082:	f7fe fb4b 	bl	800171c <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308a:	f7fe fb47 	bl	800171c <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e21d      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800309c:	4b65      	ldr	r3, [pc, #404]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a8:	4b62      	ldr	r3, [pc, #392]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	061b      	lsls	r3, r3, #24
 80030b6:	495f      	ldr	r1, [pc, #380]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
 80030bc:	e018      	b.n	80030f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030be:	4b5d      	ldr	r3, [pc, #372]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a5c      	ldr	r2, [pc, #368]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 80030c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ca:	f7fe fb27 	bl	800171c <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d2:	f7fe fb23 	bl	800171c <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e1f9      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030e4:	4b53      	ldr	r3, [pc, #332]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f0      	bne.n	80030d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d03c      	beq.n	8003176 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01c      	beq.n	800313e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003104:	4b4b      	ldr	r3, [pc, #300]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 8003106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800310a:	4a4a      	ldr	r2, [pc, #296]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003114:	f7fe fb02 	bl	800171c <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800311c:	f7fe fafe 	bl	800171c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e1d4      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800312e:	4b41      	ldr	r3, [pc, #260]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 8003130:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0ef      	beq.n	800311c <HAL_RCC_OscConfig+0x3ec>
 800313c:	e01b      	b.n	8003176 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800313e:	4b3d      	ldr	r3, [pc, #244]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 8003140:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003144:	4a3b      	ldr	r2, [pc, #236]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 8003146:	f023 0301 	bic.w	r3, r3, #1
 800314a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314e:	f7fe fae5 	bl	800171c <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003156:	f7fe fae1 	bl	800171c <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e1b7      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003168:	4b32      	ldr	r3, [pc, #200]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 800316a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1ef      	bne.n	8003156 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 80a6 	beq.w	80032d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003184:	2300      	movs	r3, #0
 8003186:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003188:	4b2a      	ldr	r3, [pc, #168]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10d      	bne.n	80031b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003194:	4b27      	ldr	r3, [pc, #156]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 8003196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003198:	4a26      	ldr	r2, [pc, #152]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 800319a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800319e:	6593      	str	r3, [r2, #88]	@ 0x58
 80031a0:	4b24      	ldr	r3, [pc, #144]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 80031a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ac:	2301      	movs	r3, #1
 80031ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b0:	4b21      	ldr	r3, [pc, #132]	@ (8003238 <HAL_RCC_OscConfig+0x508>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d118      	bne.n	80031ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003238 <HAL_RCC_OscConfig+0x508>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003238 <HAL_RCC_OscConfig+0x508>)
 80031c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c8:	f7fe faa8 	bl	800171c <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d0:	f7fe faa4 	bl	800171c <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e17a      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e2:	4b15      	ldr	r3, [pc, #84]	@ (8003238 <HAL_RCC_OscConfig+0x508>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d108      	bne.n	8003208 <HAL_RCC_OscConfig+0x4d8>
 80031f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 80031f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003206:	e029      	b.n	800325c <HAL_RCC_OscConfig+0x52c>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b05      	cmp	r3, #5
 800320e:	d115      	bne.n	800323c <HAL_RCC_OscConfig+0x50c>
 8003210:	4b08      	ldr	r3, [pc, #32]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003216:	4a07      	ldr	r2, [pc, #28]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 8003218:	f043 0304 	orr.w	r3, r3, #4
 800321c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003220:	4b04      	ldr	r3, [pc, #16]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003226:	4a03      	ldr	r2, [pc, #12]	@ (8003234 <HAL_RCC_OscConfig+0x504>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003230:	e014      	b.n	800325c <HAL_RCC_OscConfig+0x52c>
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000
 8003238:	40007000 	.word	0x40007000
 800323c:	4b9c      	ldr	r3, [pc, #624]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003242:	4a9b      	ldr	r2, [pc, #620]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 8003244:	f023 0301 	bic.w	r3, r3, #1
 8003248:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800324c:	4b98      	ldr	r3, [pc, #608]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003252:	4a97      	ldr	r2, [pc, #604]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 8003254:	f023 0304 	bic.w	r3, r3, #4
 8003258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d016      	beq.n	8003292 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003264:	f7fe fa5a 	bl	800171c <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800326a:	e00a      	b.n	8003282 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326c:	f7fe fa56 	bl	800171c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e12a      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003282:	4b8b      	ldr	r3, [pc, #556]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ed      	beq.n	800326c <HAL_RCC_OscConfig+0x53c>
 8003290:	e015      	b.n	80032be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003292:	f7fe fa43 	bl	800171c <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003298:	e00a      	b.n	80032b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fe fa3f 	bl	800171c <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e113      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032b0:	4b7f      	ldr	r3, [pc, #508]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1ed      	bne.n	800329a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032be:	7ffb      	ldrb	r3, [r7, #31]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d105      	bne.n	80032d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c4:	4b7a      	ldr	r3, [pc, #488]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 80032c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c8:	4a79      	ldr	r2, [pc, #484]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 80032ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80fe 	beq.w	80034d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032de:	2b02      	cmp	r3, #2
 80032e0:	f040 80d0 	bne.w	8003484 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032e4:	4b72      	ldr	r3, [pc, #456]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 0203 	and.w	r2, r3, #3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d130      	bne.n	800335a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003302:	3b01      	subs	r3, #1
 8003304:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d127      	bne.n	800335a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003314:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003316:	429a      	cmp	r2, r3
 8003318:	d11f      	bne.n	800335a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003324:	2a07      	cmp	r2, #7
 8003326:	bf14      	ite	ne
 8003328:	2201      	movne	r2, #1
 800332a:	2200      	moveq	r2, #0
 800332c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800332e:	4293      	cmp	r3, r2
 8003330:	d113      	bne.n	800335a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	3b01      	subs	r3, #1
 8003340:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003342:	429a      	cmp	r2, r3
 8003344:	d109      	bne.n	800335a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003350:	085b      	lsrs	r3, r3, #1
 8003352:	3b01      	subs	r3, #1
 8003354:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003356:	429a      	cmp	r2, r3
 8003358:	d06e      	beq.n	8003438 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	2b0c      	cmp	r3, #12
 800335e:	d069      	beq.n	8003434 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003360:	4b53      	ldr	r3, [pc, #332]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800336c:	4b50      	ldr	r3, [pc, #320]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0ad      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800337c:	4b4c      	ldr	r3, [pc, #304]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a4b      	ldr	r2, [pc, #300]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 8003382:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003386:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003388:	f7fe f9c8 	bl	800171c <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003390:	f7fe f9c4 	bl	800171c <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e09a      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a2:	4b43      	ldr	r3, [pc, #268]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ae:	4b40      	ldr	r3, [pc, #256]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	4b40      	ldr	r3, [pc, #256]	@ (80034b4 <HAL_RCC_OscConfig+0x784>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80033be:	3a01      	subs	r2, #1
 80033c0:	0112      	lsls	r2, r2, #4
 80033c2:	4311      	orrs	r1, r2
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033c8:	0212      	lsls	r2, r2, #8
 80033ca:	4311      	orrs	r1, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033d0:	0852      	lsrs	r2, r2, #1
 80033d2:	3a01      	subs	r2, #1
 80033d4:	0552      	lsls	r2, r2, #21
 80033d6:	4311      	orrs	r1, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80033dc:	0852      	lsrs	r2, r2, #1
 80033de:	3a01      	subs	r2, #1
 80033e0:	0652      	lsls	r2, r2, #25
 80033e2:	4311      	orrs	r1, r2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033e8:	0912      	lsrs	r2, r2, #4
 80033ea:	0452      	lsls	r2, r2, #17
 80033ec:	430a      	orrs	r2, r1
 80033ee:	4930      	ldr	r1, [pc, #192]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033f4:	4b2e      	ldr	r3, [pc, #184]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a2d      	ldr	r2, [pc, #180]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 80033fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003400:	4b2b      	ldr	r3, [pc, #172]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4a2a      	ldr	r2, [pc, #168]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 8003406:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800340a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800340c:	f7fe f986 	bl	800171c <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003414:	f7fe f982 	bl	800171c <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e058      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003426:	4b22      	ldr	r3, [pc, #136]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003432:	e050      	b.n	80034d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e04f      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003438:	4b1d      	ldr	r3, [pc, #116]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d148      	bne.n	80034d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003444:	4b1a      	ldr	r3, [pc, #104]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a19      	ldr	r2, [pc, #100]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 800344a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800344e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003450:	4b17      	ldr	r3, [pc, #92]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4a16      	ldr	r2, [pc, #88]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 8003456:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800345a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800345c:	f7fe f95e 	bl	800171c <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe f95a 	bl	800171c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e030      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003476:	4b0e      	ldr	r3, [pc, #56]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x734>
 8003482:	e028      	b.n	80034d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b0c      	cmp	r3, #12
 8003488:	d023      	beq.n	80034d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348a:	4b09      	ldr	r3, [pc, #36]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a08      	ldr	r2, [pc, #32]	@ (80034b0 <HAL_RCC_OscConfig+0x780>)
 8003490:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003496:	f7fe f941 	bl	800171c <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349c:	e00c      	b.n	80034b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349e:	f7fe f93d 	bl	800171c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d905      	bls.n	80034b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e013      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
 80034b0:	40021000 	.word	0x40021000
 80034b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b8:	4b09      	ldr	r3, [pc, #36]	@ (80034e0 <HAL_RCC_OscConfig+0x7b0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1ec      	bne.n	800349e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034c4:	4b06      	ldr	r3, [pc, #24]	@ (80034e0 <HAL_RCC_OscConfig+0x7b0>)
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	4905      	ldr	r1, [pc, #20]	@ (80034e0 <HAL_RCC_OscConfig+0x7b0>)
 80034ca:	4b06      	ldr	r3, [pc, #24]	@ (80034e4 <HAL_RCC_OscConfig+0x7b4>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	60cb      	str	r3, [r1, #12]
 80034d0:	e001      	b.n	80034d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000
 80034e4:	feeefffc 	.word	0xfeeefffc

080034e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0e7      	b.n	80036cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034fc:	4b75      	ldr	r3, [pc, #468]	@ (80036d4 <HAL_RCC_ClockConfig+0x1ec>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d910      	bls.n	800352c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350a:	4b72      	ldr	r3, [pc, #456]	@ (80036d4 <HAL_RCC_ClockConfig+0x1ec>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 0207 	bic.w	r2, r3, #7
 8003512:	4970      	ldr	r1, [pc, #448]	@ (80036d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	4313      	orrs	r3, r2
 8003518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800351a:	4b6e      	ldr	r3, [pc, #440]	@ (80036d4 <HAL_RCC_ClockConfig+0x1ec>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d001      	beq.n	800352c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0cf      	b.n	80036cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d010      	beq.n	800355a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	4b66      	ldr	r3, [pc, #408]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003544:	429a      	cmp	r2, r3
 8003546:	d908      	bls.n	800355a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003548:	4b63      	ldr	r3, [pc, #396]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4960      	ldr	r1, [pc, #384]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d04c      	beq.n	8003600 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b03      	cmp	r3, #3
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356e:	4b5a      	ldr	r3, [pc, #360]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d121      	bne.n	80035be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e0a6      	b.n	80036cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d107      	bne.n	8003596 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003586:	4b54      	ldr	r3, [pc, #336]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d115      	bne.n	80035be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e09a      	b.n	80036cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d107      	bne.n	80035ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800359e:	4b4e      	ldr	r3, [pc, #312]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e08e      	b.n	80036cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ae:	4b4a      	ldr	r3, [pc, #296]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e086      	b.n	80036cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035be:	4b46      	ldr	r3, [pc, #280]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f023 0203 	bic.w	r2, r3, #3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4943      	ldr	r1, [pc, #268]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d0:	f7fe f8a4 	bl	800171c <HAL_GetTick>
 80035d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d6:	e00a      	b.n	80035ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d8:	f7fe f8a0 	bl	800171c <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e06e      	b.n	80036cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	4b3a      	ldr	r3, [pc, #232]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 020c 	and.w	r2, r3, #12
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d1eb      	bne.n	80035d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d010      	beq.n	800362e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	4b31      	ldr	r3, [pc, #196]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003618:	429a      	cmp	r2, r3
 800361a:	d208      	bcs.n	800362e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800361c:	4b2e      	ldr	r3, [pc, #184]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	492b      	ldr	r1, [pc, #172]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800362e:	4b29      	ldr	r3, [pc, #164]	@ (80036d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d210      	bcs.n	800365e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363c:	4b25      	ldr	r3, [pc, #148]	@ (80036d4 <HAL_RCC_ClockConfig+0x1ec>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f023 0207 	bic.w	r2, r3, #7
 8003644:	4923      	ldr	r1, [pc, #140]	@ (80036d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	4313      	orrs	r3, r2
 800364a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364c:	4b21      	ldr	r3, [pc, #132]	@ (80036d4 <HAL_RCC_ClockConfig+0x1ec>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d001      	beq.n	800365e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e036      	b.n	80036cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	2b00      	cmp	r3, #0
 8003668:	d008      	beq.n	800367c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800366a:	4b1b      	ldr	r3, [pc, #108]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	4918      	ldr	r1, [pc, #96]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003678:	4313      	orrs	r3, r2
 800367a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d009      	beq.n	800369c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003688:	4b13      	ldr	r3, [pc, #76]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4910      	ldr	r1, [pc, #64]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003698:	4313      	orrs	r3, r2
 800369a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800369c:	f000 f824 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b0d      	ldr	r3, [pc, #52]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	091b      	lsrs	r3, r3, #4
 80036a8:	f003 030f 	and.w	r3, r3, #15
 80036ac:	490b      	ldr	r1, [pc, #44]	@ (80036dc <HAL_RCC_ClockConfig+0x1f4>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
 80036b8:	4a09      	ldr	r2, [pc, #36]	@ (80036e0 <HAL_RCC_ClockConfig+0x1f8>)
 80036ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036bc:	4b09      	ldr	r3, [pc, #36]	@ (80036e4 <HAL_RCC_ClockConfig+0x1fc>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fd ffdb 	bl	800167c <HAL_InitTick>
 80036c6:	4603      	mov	r3, r0
 80036c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80036ca:	7afb      	ldrb	r3, [r7, #11]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40022000 	.word	0x40022000
 80036d8:	40021000 	.word	0x40021000
 80036dc:	08005d08 	.word	0x08005d08
 80036e0:	20000000 	.word	0x20000000
 80036e4:	20000004 	.word	0x20000004

080036e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b089      	sub	sp, #36	@ 0x24
 80036ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f6:	4b3e      	ldr	r3, [pc, #248]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003700:	4b3b      	ldr	r3, [pc, #236]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x34>
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	2b0c      	cmp	r3, #12
 8003714:	d121      	bne.n	800375a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d11e      	bne.n	800375a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800371c:	4b34      	ldr	r3, [pc, #208]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d107      	bne.n	8003738 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003728:	4b31      	ldr	r3, [pc, #196]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800372a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	e005      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003738:	4b2d      	ldr	r3, [pc, #180]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003744:	4a2b      	ldr	r2, [pc, #172]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10d      	bne.n	8003770 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b04      	cmp	r3, #4
 800375e:	d102      	bne.n	8003766 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003760:	4b25      	ldr	r3, [pc, #148]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	e004      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b08      	cmp	r3, #8
 800376a:	d101      	bne.n	8003770 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800376c:	4b23      	ldr	r3, [pc, #140]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x114>)
 800376e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b0c      	cmp	r3, #12
 8003774:	d134      	bne.n	80037e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003776:	4b1e      	ldr	r3, [pc, #120]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d003      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0xa6>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b03      	cmp	r3, #3
 800378a:	d003      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0xac>
 800378c:	e005      	b.n	800379a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800378e:	4b1a      	ldr	r3, [pc, #104]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003790:	617b      	str	r3, [r7, #20]
      break;
 8003792:	e005      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003794:	4b19      	ldr	r3, [pc, #100]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x114>)
 8003796:	617b      	str	r3, [r7, #20]
      break;
 8003798:	e002      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	617b      	str	r3, [r7, #20]
      break;
 800379e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037a0:	4b13      	ldr	r3, [pc, #76]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	091b      	lsrs	r3, r3, #4
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	3301      	adds	r3, #1
 80037ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037ae:	4b10      	ldr	r3, [pc, #64]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	0a1b      	lsrs	r3, r3, #8
 80037b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	fb03 f202 	mul.w	r2, r3, r2
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037c6:	4b0a      	ldr	r3, [pc, #40]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	0e5b      	lsrs	r3, r3, #25
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	3301      	adds	r3, #1
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	fbb2 f3f3 	udiv	r3, r2, r3
 80037de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037e0:	69bb      	ldr	r3, [r7, #24]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3724      	adds	r7, #36	@ 0x24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000
 80037f4:	08005d20 	.word	0x08005d20
 80037f8:	00f42400 	.word	0x00f42400
 80037fc:	007a1200 	.word	0x007a1200

08003800 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003804:	4b03      	ldr	r3, [pc, #12]	@ (8003814 <HAL_RCC_GetHCLKFreq+0x14>)
 8003806:	681b      	ldr	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000000 	.word	0x20000000

08003818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800381c:	f7ff fff0 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b06      	ldr	r3, [pc, #24]	@ (800383c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	0a1b      	lsrs	r3, r3, #8
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	4904      	ldr	r1, [pc, #16]	@ (8003840 <HAL_RCC_GetPCLK1Freq+0x28>)
 800382e:	5ccb      	ldrb	r3, [r1, r3]
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000
 8003840:	08005d18 	.word	0x08005d18

08003844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003848:	f7ff ffda 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b06      	ldr	r3, [pc, #24]	@ (8003868 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	0adb      	lsrs	r3, r3, #11
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4904      	ldr	r1, [pc, #16]	@ (800386c <HAL_RCC_GetPCLK2Freq+0x28>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40021000 	.word	0x40021000
 800386c:	08005d18 	.word	0x08005d18

08003870 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800387c:	4b2a      	ldr	r3, [pc, #168]	@ (8003928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800387e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003888:	f7ff f922 	bl	8002ad0 <HAL_PWREx_GetVoltageRange>
 800388c:	6178      	str	r0, [r7, #20]
 800388e:	e014      	b.n	80038ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003890:	4b25      	ldr	r3, [pc, #148]	@ (8003928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003894:	4a24      	ldr	r2, [pc, #144]	@ (8003928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800389a:	6593      	str	r3, [r2, #88]	@ 0x58
 800389c:	4b22      	ldr	r3, [pc, #136]	@ (8003928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800389e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038a8:	f7ff f912 	bl	8002ad0 <HAL_PWREx_GetVoltageRange>
 80038ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038c0:	d10b      	bne.n	80038da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b80      	cmp	r3, #128	@ 0x80
 80038c6:	d919      	bls.n	80038fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80038cc:	d902      	bls.n	80038d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038ce:	2302      	movs	r3, #2
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	e013      	b.n	80038fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038d4:	2301      	movs	r3, #1
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	e010      	b.n	80038fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b80      	cmp	r3, #128	@ 0x80
 80038de:	d902      	bls.n	80038e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038e0:	2303      	movs	r3, #3
 80038e2:	613b      	str	r3, [r7, #16]
 80038e4:	e00a      	b.n	80038fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b80      	cmp	r3, #128	@ 0x80
 80038ea:	d102      	bne.n	80038f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038ec:	2302      	movs	r3, #2
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	e004      	b.n	80038fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b70      	cmp	r3, #112	@ 0x70
 80038f6:	d101      	bne.n	80038fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038f8:	2301      	movs	r3, #1
 80038fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038fc:	4b0b      	ldr	r3, [pc, #44]	@ (800392c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f023 0207 	bic.w	r2, r3, #7
 8003904:	4909      	ldr	r1, [pc, #36]	@ (800392c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800390c:	4b07      	ldr	r3, [pc, #28]	@ (800392c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	429a      	cmp	r2, r3
 8003918:	d001      	beq.n	800391e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40021000 	.word	0x40021000
 800392c:	40022000 	.word	0x40022000

08003930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003938:	2300      	movs	r3, #0
 800393a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800393c:	2300      	movs	r3, #0
 800393e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003948:	2b00      	cmp	r3, #0
 800394a:	d041      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003950:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003954:	d02a      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003956:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800395a:	d824      	bhi.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800395c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003960:	d008      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003962:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003966:	d81e      	bhi.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800396c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003970:	d010      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003972:	e018      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003974:	4b86      	ldr	r3, [pc, #536]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4a85      	ldr	r2, [pc, #532]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800397a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800397e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003980:	e015      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3304      	adds	r3, #4
 8003986:	2100      	movs	r1, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f000 facb 	bl	8003f24 <RCCEx_PLLSAI1_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003992:	e00c      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3320      	adds	r3, #32
 8003998:	2100      	movs	r1, #0
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fbb6 	bl	800410c <RCCEx_PLLSAI2_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039a4:	e003      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	74fb      	strb	r3, [r7, #19]
      break;
 80039aa:	e000      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ae:	7cfb      	ldrb	r3, [r7, #19]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10b      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039b4:	4b76      	ldr	r3, [pc, #472]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039c2:	4973      	ldr	r1, [pc, #460]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80039ca:	e001      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039cc:	7cfb      	ldrb	r3, [r7, #19]
 80039ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d041      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80039e4:	d02a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80039e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80039ea:	d824      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039f0:	d008      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039f6:	d81e      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80039fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a00:	d010      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a02:	e018      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a04:	4b62      	ldr	r3, [pc, #392]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a61      	ldr	r2, [pc, #388]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a0e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a10:	e015      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3304      	adds	r3, #4
 8003a16:	2100      	movs	r1, #0
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fa83 	bl	8003f24 <RCCEx_PLLSAI1_Config>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a22:	e00c      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3320      	adds	r3, #32
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fb6e 	bl	800410c <RCCEx_PLLSAI2_Config>
 8003a30:	4603      	mov	r3, r0
 8003a32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a34:	e003      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	74fb      	strb	r3, [r7, #19]
      break;
 8003a3a:	e000      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10b      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a44:	4b52      	ldr	r3, [pc, #328]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a52:	494f      	ldr	r1, [pc, #316]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a5a:	e001      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80a0 	beq.w	8003bae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a72:	4b47      	ldr	r3, [pc, #284]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a82:	2300      	movs	r3, #0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00d      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a88:	4b41      	ldr	r3, [pc, #260]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8c:	4a40      	ldr	r2, [pc, #256]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a92:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a94:	4b3e      	ldr	r3, [pc, #248]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a3a      	ldr	r2, [pc, #232]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003aaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ab0:	f7fd fe34 	bl	800171c <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ab6:	e009      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab8:	f7fd fe30 	bl	800171c <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d902      	bls.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	74fb      	strb	r3, [r7, #19]
        break;
 8003aca:	e005      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003acc:	4b31      	ldr	r3, [pc, #196]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0ef      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ad8:	7cfb      	ldrb	r3, [r7, #19]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d15c      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ade:	4b2c      	ldr	r3, [pc, #176]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ae8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01f      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d019      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003afc:	4b24      	ldr	r3, [pc, #144]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b08:	4b21      	ldr	r3, [pc, #132]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b0e:	4a20      	ldr	r2, [pc, #128]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b18:	4b1d      	ldr	r3, [pc, #116]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b28:	4a19      	ldr	r2, [pc, #100]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d016      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3a:	f7fd fdef 	bl	800171c <HAL_GetTick>
 8003b3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b40:	e00b      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b42:	f7fd fdeb 	bl	800171c <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d902      	bls.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	74fb      	strb	r3, [r7, #19]
            break;
 8003b58:	e006      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0ec      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b6e:	4b08      	ldr	r3, [pc, #32]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b7e:	4904      	ldr	r1, [pc, #16]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b86:	e009      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b88:	7cfb      	ldrb	r3, [r7, #19]
 8003b8a:	74bb      	strb	r3, [r7, #18]
 8003b8c:	e006      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
 8003b9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b9c:	7c7b      	ldrb	r3, [r7, #17]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d105      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba2:	4b9e      	ldr	r3, [pc, #632]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba6:	4a9d      	ldr	r2, [pc, #628]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bba:	4b98      	ldr	r3, [pc, #608]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc0:	f023 0203 	bic.w	r2, r3, #3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	4994      	ldr	r1, [pc, #592]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bdc:	4b8f      	ldr	r3, [pc, #572]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be2:	f023 020c 	bic.w	r2, r3, #12
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bea:	498c      	ldr	r1, [pc, #560]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bfe:	4b87      	ldr	r3, [pc, #540]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c04:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0c:	4983      	ldr	r1, [pc, #524]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c20:	4b7e      	ldr	r3, [pc, #504]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c26:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2e:	497b      	ldr	r1, [pc, #492]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c42:	4b76      	ldr	r3, [pc, #472]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c50:	4972      	ldr	r1, [pc, #456]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c64:	4b6d      	ldr	r3, [pc, #436]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c72:	496a      	ldr	r1, [pc, #424]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c86:	4b65      	ldr	r3, [pc, #404]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c94:	4961      	ldr	r1, [pc, #388]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ca8:	4b5c      	ldr	r3, [pc, #368]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb6:	4959      	ldr	r1, [pc, #356]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cca:	4b54      	ldr	r3, [pc, #336]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cd8:	4950      	ldr	r1, [pc, #320]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cec:	4b4b      	ldr	r3, [pc, #300]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfa:	4948      	ldr	r1, [pc, #288]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d0e:	4b43      	ldr	r3, [pc, #268]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1c:	493f      	ldr	r1, [pc, #252]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d028      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d30:	4b3a      	ldr	r3, [pc, #232]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d3e:	4937      	ldr	r1, [pc, #220]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d4e:	d106      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d50:	4b32      	ldr	r3, [pc, #200]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4a31      	ldr	r2, [pc, #196]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d5a:	60d3      	str	r3, [r2, #12]
 8003d5c:	e011      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d66:	d10c      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f8d8 	bl	8003f24 <RCCEx_PLLSAI1_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d7e:	7cfb      	ldrb	r3, [r7, #19]
 8003d80:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d028      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d8e:	4b23      	ldr	r3, [pc, #140]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d94:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9c:	491f      	ldr	r1, [pc, #124]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dac:	d106      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dae:	4b1b      	ldr	r3, [pc, #108]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	4a1a      	ldr	r2, [pc, #104]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003db8:	60d3      	str	r3, [r2, #12]
 8003dba:	e011      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f8a9 	bl	8003f24 <RCCEx_PLLSAI1_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d02b      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dec:	4b0b      	ldr	r3, [pc, #44]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dfa:	4908      	ldr	r1, [pc, #32]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e0a:	d109      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e0c:	4b03      	ldr	r3, [pc, #12]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4a02      	ldr	r2, [pc, #8]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e16:	60d3      	str	r3, [r2, #12]
 8003e18:	e014      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	2101      	movs	r1, #1
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 f877 	bl	8003f24 <RCCEx_PLLSAI1_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e3a:	7cfb      	ldrb	r3, [r7, #19]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d02f      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e50:	4b2b      	ldr	r3, [pc, #172]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e56:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e5e:	4928      	ldr	r1, [pc, #160]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e6e:	d10d      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3304      	adds	r3, #4
 8003e74:	2102      	movs	r1, #2
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f854 	bl	8003f24 <RCCEx_PLLSAI1_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e80:	7cfb      	ldrb	r3, [r7, #19]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d014      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e86:	7cfb      	ldrb	r3, [r7, #19]
 8003e88:	74bb      	strb	r3, [r7, #18]
 8003e8a:	e011      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e94:	d10c      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3320      	adds	r3, #32
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 f935 	bl	800410c <RCCEx_PLLSAI2_Config>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ea6:	7cfb      	ldrb	r3, [r7, #19]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003eac:	7cfb      	ldrb	r3, [r7, #19]
 8003eae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ebc:	4b10      	ldr	r3, [pc, #64]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003eca:	490d      	ldr	r1, [pc, #52]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00b      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ede:	4b08      	ldr	r3, [pc, #32]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eee:	4904      	ldr	r1, [pc, #16]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ef6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40021000 	.word	0x40021000

08003f04 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003f08:	4b05      	ldr	r3, [pc, #20]	@ (8003f20 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a04      	ldr	r2, [pc, #16]	@ (8003f20 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f0e:	f043 0304 	orr.w	r3, r3, #4
 8003f12:	6013      	str	r3, [r2, #0]
}
 8003f14:	bf00      	nop
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40021000 	.word	0x40021000

08003f24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f32:	4b75      	ldr	r3, [pc, #468]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d018      	beq.n	8003f70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f3e:	4b72      	ldr	r3, [pc, #456]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f003 0203 	and.w	r2, r3, #3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d10d      	bne.n	8003f6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
       ||
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f56:	4b6c      	ldr	r3, [pc, #432]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	091b      	lsrs	r3, r3, #4
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
       ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d047      	beq.n	8003ffa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
 8003f6e:	e044      	b.n	8003ffa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d018      	beq.n	8003faa <RCCEx_PLLSAI1_Config+0x86>
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d825      	bhi.n	8003fc8 <RCCEx_PLLSAI1_Config+0xa4>
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d002      	beq.n	8003f86 <RCCEx_PLLSAI1_Config+0x62>
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d009      	beq.n	8003f98 <RCCEx_PLLSAI1_Config+0x74>
 8003f84:	e020      	b.n	8003fc8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f86:	4b60      	ldr	r3, [pc, #384]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d11d      	bne.n	8003fce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f96:	e01a      	b.n	8003fce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f98:	4b5b      	ldr	r3, [pc, #364]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d116      	bne.n	8003fd2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fa8:	e013      	b.n	8003fd2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003faa:	4b57      	ldr	r3, [pc, #348]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10f      	bne.n	8003fd6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fb6:	4b54      	ldr	r3, [pc, #336]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d109      	bne.n	8003fd6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fc6:	e006      	b.n	8003fd6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
      break;
 8003fcc:	e004      	b.n	8003fd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fce:	bf00      	nop
 8003fd0:	e002      	b.n	8003fd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e000      	b.n	8003fd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10d      	bne.n	8003ffa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fde:	4b4a      	ldr	r3, [pc, #296]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6819      	ldr	r1, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	430b      	orrs	r3, r1
 8003ff4:	4944      	ldr	r1, [pc, #272]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d17d      	bne.n	80040fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004000:	4b41      	ldr	r3, [pc, #260]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a40      	ldr	r2, [pc, #256]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004006:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800400a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800400c:	f7fd fb86 	bl	800171c <HAL_GetTick>
 8004010:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004012:	e009      	b.n	8004028 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004014:	f7fd fb82 	bl	800171c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d902      	bls.n	8004028 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	73fb      	strb	r3, [r7, #15]
        break;
 8004026:	e005      	b.n	8004034 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004028:	4b37      	ldr	r3, [pc, #220]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1ef      	bne.n	8004014 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d160      	bne.n	80040fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d111      	bne.n	8004064 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004040:	4b31      	ldr	r3, [pc, #196]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004048:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6892      	ldr	r2, [r2, #8]
 8004050:	0211      	lsls	r1, r2, #8
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	68d2      	ldr	r2, [r2, #12]
 8004056:	0912      	lsrs	r2, r2, #4
 8004058:	0452      	lsls	r2, r2, #17
 800405a:	430a      	orrs	r2, r1
 800405c:	492a      	ldr	r1, [pc, #168]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405e:	4313      	orrs	r3, r2
 8004060:	610b      	str	r3, [r1, #16]
 8004062:	e027      	b.n	80040b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d112      	bne.n	8004090 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800406a:	4b27      	ldr	r3, [pc, #156]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004072:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6892      	ldr	r2, [r2, #8]
 800407a:	0211      	lsls	r1, r2, #8
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6912      	ldr	r2, [r2, #16]
 8004080:	0852      	lsrs	r2, r2, #1
 8004082:	3a01      	subs	r2, #1
 8004084:	0552      	lsls	r2, r2, #21
 8004086:	430a      	orrs	r2, r1
 8004088:	491f      	ldr	r1, [pc, #124]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408a:	4313      	orrs	r3, r2
 800408c:	610b      	str	r3, [r1, #16]
 800408e:	e011      	b.n	80040b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004090:	4b1d      	ldr	r3, [pc, #116]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004098:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6892      	ldr	r2, [r2, #8]
 80040a0:	0211      	lsls	r1, r2, #8
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6952      	ldr	r2, [r2, #20]
 80040a6:	0852      	lsrs	r2, r2, #1
 80040a8:	3a01      	subs	r2, #1
 80040aa:	0652      	lsls	r2, r2, #25
 80040ac:	430a      	orrs	r2, r1
 80040ae:	4916      	ldr	r1, [pc, #88]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040b4:	4b14      	ldr	r3, [pc, #80]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a13      	ldr	r2, [pc, #76]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7fd fb2c 	bl	800171c <HAL_GetTick>
 80040c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040c6:	e009      	b.n	80040dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040c8:	f7fd fb28 	bl	800171c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d902      	bls.n	80040dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	73fb      	strb	r3, [r7, #15]
          break;
 80040da:	e005      	b.n	80040e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0ef      	beq.n	80040c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040ee:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	4904      	ldr	r1, [pc, #16]	@ (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40021000 	.word	0x40021000

0800410c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800411a:	4b6a      	ldr	r3, [pc, #424]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d018      	beq.n	8004158 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004126:	4b67      	ldr	r3, [pc, #412]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0203 	and.w	r2, r3, #3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d10d      	bne.n	8004152 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
       ||
 800413a:	2b00      	cmp	r3, #0
 800413c:	d009      	beq.n	8004152 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800413e:	4b61      	ldr	r3, [pc, #388]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	091b      	lsrs	r3, r3, #4
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
       ||
 800414e:	429a      	cmp	r2, r3
 8004150:	d047      	beq.n	80041e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
 8004156:	e044      	b.n	80041e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b03      	cmp	r3, #3
 800415e:	d018      	beq.n	8004192 <RCCEx_PLLSAI2_Config+0x86>
 8004160:	2b03      	cmp	r3, #3
 8004162:	d825      	bhi.n	80041b0 <RCCEx_PLLSAI2_Config+0xa4>
 8004164:	2b01      	cmp	r3, #1
 8004166:	d002      	beq.n	800416e <RCCEx_PLLSAI2_Config+0x62>
 8004168:	2b02      	cmp	r3, #2
 800416a:	d009      	beq.n	8004180 <RCCEx_PLLSAI2_Config+0x74>
 800416c:	e020      	b.n	80041b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800416e:	4b55      	ldr	r3, [pc, #340]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d11d      	bne.n	80041b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800417e:	e01a      	b.n	80041b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004180:	4b50      	ldr	r3, [pc, #320]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004188:	2b00      	cmp	r3, #0
 800418a:	d116      	bne.n	80041ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004190:	e013      	b.n	80041ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004192:	4b4c      	ldr	r3, [pc, #304]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10f      	bne.n	80041be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800419e:	4b49      	ldr	r3, [pc, #292]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041ae:	e006      	b.n	80041be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
      break;
 80041b4:	e004      	b.n	80041c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041b6:	bf00      	nop
 80041b8:	e002      	b.n	80041c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041ba:	bf00      	nop
 80041bc:	e000      	b.n	80041c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041be:	bf00      	nop
    }

    if(status == HAL_OK)
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10d      	bne.n	80041e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041c6:	4b3f      	ldr	r3, [pc, #252]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6819      	ldr	r1, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	430b      	orrs	r3, r1
 80041dc:	4939      	ldr	r1, [pc, #228]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d167      	bne.n	80042b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80041e8:	4b36      	ldr	r3, [pc, #216]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a35      	ldr	r2, [pc, #212]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f4:	f7fd fa92 	bl	800171c <HAL_GetTick>
 80041f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041fa:	e009      	b.n	8004210 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041fc:	f7fd fa8e 	bl	800171c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d902      	bls.n	8004210 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	73fb      	strb	r3, [r7, #15]
        break;
 800420e:	e005      	b.n	800421c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004210:	4b2c      	ldr	r3, [pc, #176]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1ef      	bne.n	80041fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d14a      	bne.n	80042b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d111      	bne.n	800424c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004228:	4b26      	ldr	r3, [pc, #152]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004230:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6892      	ldr	r2, [r2, #8]
 8004238:	0211      	lsls	r1, r2, #8
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	68d2      	ldr	r2, [r2, #12]
 800423e:	0912      	lsrs	r2, r2, #4
 8004240:	0452      	lsls	r2, r2, #17
 8004242:	430a      	orrs	r2, r1
 8004244:	491f      	ldr	r1, [pc, #124]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004246:	4313      	orrs	r3, r2
 8004248:	614b      	str	r3, [r1, #20]
 800424a:	e011      	b.n	8004270 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800424c:	4b1d      	ldr	r3, [pc, #116]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004254:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6892      	ldr	r2, [r2, #8]
 800425c:	0211      	lsls	r1, r2, #8
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6912      	ldr	r2, [r2, #16]
 8004262:	0852      	lsrs	r2, r2, #1
 8004264:	3a01      	subs	r2, #1
 8004266:	0652      	lsls	r2, r2, #25
 8004268:	430a      	orrs	r2, r1
 800426a:	4916      	ldr	r1, [pc, #88]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800426c:	4313      	orrs	r3, r2
 800426e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004270:	4b14      	ldr	r3, [pc, #80]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a13      	ldr	r2, [pc, #76]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800427a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427c:	f7fd fa4e 	bl	800171c <HAL_GetTick>
 8004280:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004282:	e009      	b.n	8004298 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004284:	f7fd fa4a 	bl	800171c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d902      	bls.n	8004298 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	73fb      	strb	r3, [r7, #15]
          break;
 8004296:	e005      	b.n	80042a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004298:	4b0a      	ldr	r3, [pc, #40]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0ef      	beq.n	8004284 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042aa:	4b06      	ldr	r3, [pc, #24]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	4904      	ldr	r1, [pc, #16]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40021000 	.word	0x40021000

080042c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e095      	b.n	8004406 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d108      	bne.n	80042f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042ea:	d009      	beq.n	8004300 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	61da      	str	r2, [r3, #28]
 80042f2:	e005      	b.n	8004300 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7fc ff48 	bl	80011b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004336:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004340:	d902      	bls.n	8004348 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	e002      	b.n	800434e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004348:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800434c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004356:	d007      	beq.n	8004368 <HAL_SPI_Init+0xa0>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004360:	d002      	beq.n	8004368 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043aa:	ea42 0103 	orr.w	r1, r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	0c1b      	lsrs	r3, r3, #16
 80043c4:	f003 0204 	and.w	r2, r3, #4
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80043e4:	ea42 0103 	orr.w	r1, r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b082      	sub	sp, #8
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e040      	b.n	80044a2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d106      	bne.n	8004436 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7fc ff01 	bl	8001238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2224      	movs	r2, #36	@ 0x24
 800443a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fae1 	bl	8004a1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f826 	bl	80044ac <UART_SetConfig>
 8004460:	4603      	mov	r3, r0
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e01b      	b.n	80044a2 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004478:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004488:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0201 	orr.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fb60 	bl	8004b60 <UART_CheckIdleState>
 80044a0:	4603      	mov	r3, r0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044b0:	b08a      	sub	sp, #40	@ 0x28
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	431a      	orrs	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	4ba4      	ldr	r3, [pc, #656]	@ (800476c <UART_SetConfig+0x2c0>)
 80044dc:	4013      	ands	r3, r2
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	6812      	ldr	r2, [r2, #0]
 80044e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044e4:	430b      	orrs	r3, r1
 80044e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a99      	ldr	r2, [pc, #612]	@ (8004770 <UART_SetConfig+0x2c4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d004      	beq.n	8004518 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004514:	4313      	orrs	r3, r2
 8004516:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004528:	430a      	orrs	r2, r1
 800452a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a90      	ldr	r2, [pc, #576]	@ (8004774 <UART_SetConfig+0x2c8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d126      	bne.n	8004584 <UART_SetConfig+0xd8>
 8004536:	4b90      	ldr	r3, [pc, #576]	@ (8004778 <UART_SetConfig+0x2cc>)
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	2b03      	cmp	r3, #3
 8004542:	d81b      	bhi.n	800457c <UART_SetConfig+0xd0>
 8004544:	a201      	add	r2, pc, #4	@ (adr r2, 800454c <UART_SetConfig+0xa0>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	0800455d 	.word	0x0800455d
 8004550:	0800456d 	.word	0x0800456d
 8004554:	08004565 	.word	0x08004565
 8004558:	08004575 	.word	0x08004575
 800455c:	2301      	movs	r3, #1
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004562:	e116      	b.n	8004792 <UART_SetConfig+0x2e6>
 8004564:	2302      	movs	r3, #2
 8004566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800456a:	e112      	b.n	8004792 <UART_SetConfig+0x2e6>
 800456c:	2304      	movs	r3, #4
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004572:	e10e      	b.n	8004792 <UART_SetConfig+0x2e6>
 8004574:	2308      	movs	r3, #8
 8004576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800457a:	e10a      	b.n	8004792 <UART_SetConfig+0x2e6>
 800457c:	2310      	movs	r3, #16
 800457e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004582:	e106      	b.n	8004792 <UART_SetConfig+0x2e6>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a7c      	ldr	r2, [pc, #496]	@ (800477c <UART_SetConfig+0x2d0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d138      	bne.n	8004600 <UART_SetConfig+0x154>
 800458e:	4b7a      	ldr	r3, [pc, #488]	@ (8004778 <UART_SetConfig+0x2cc>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004594:	f003 030c 	and.w	r3, r3, #12
 8004598:	2b0c      	cmp	r3, #12
 800459a:	d82d      	bhi.n	80045f8 <UART_SetConfig+0x14c>
 800459c:	a201      	add	r2, pc, #4	@ (adr r2, 80045a4 <UART_SetConfig+0xf8>)
 800459e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a2:	bf00      	nop
 80045a4:	080045d9 	.word	0x080045d9
 80045a8:	080045f9 	.word	0x080045f9
 80045ac:	080045f9 	.word	0x080045f9
 80045b0:	080045f9 	.word	0x080045f9
 80045b4:	080045e9 	.word	0x080045e9
 80045b8:	080045f9 	.word	0x080045f9
 80045bc:	080045f9 	.word	0x080045f9
 80045c0:	080045f9 	.word	0x080045f9
 80045c4:	080045e1 	.word	0x080045e1
 80045c8:	080045f9 	.word	0x080045f9
 80045cc:	080045f9 	.word	0x080045f9
 80045d0:	080045f9 	.word	0x080045f9
 80045d4:	080045f1 	.word	0x080045f1
 80045d8:	2300      	movs	r3, #0
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045de:	e0d8      	b.n	8004792 <UART_SetConfig+0x2e6>
 80045e0:	2302      	movs	r3, #2
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045e6:	e0d4      	b.n	8004792 <UART_SetConfig+0x2e6>
 80045e8:	2304      	movs	r3, #4
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ee:	e0d0      	b.n	8004792 <UART_SetConfig+0x2e6>
 80045f0:	2308      	movs	r3, #8
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045f6:	e0cc      	b.n	8004792 <UART_SetConfig+0x2e6>
 80045f8:	2310      	movs	r3, #16
 80045fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045fe:	e0c8      	b.n	8004792 <UART_SetConfig+0x2e6>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a5e      	ldr	r2, [pc, #376]	@ (8004780 <UART_SetConfig+0x2d4>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d125      	bne.n	8004656 <UART_SetConfig+0x1aa>
 800460a:	4b5b      	ldr	r3, [pc, #364]	@ (8004778 <UART_SetConfig+0x2cc>)
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004610:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004614:	2b30      	cmp	r3, #48	@ 0x30
 8004616:	d016      	beq.n	8004646 <UART_SetConfig+0x19a>
 8004618:	2b30      	cmp	r3, #48	@ 0x30
 800461a:	d818      	bhi.n	800464e <UART_SetConfig+0x1a2>
 800461c:	2b20      	cmp	r3, #32
 800461e:	d00a      	beq.n	8004636 <UART_SetConfig+0x18a>
 8004620:	2b20      	cmp	r3, #32
 8004622:	d814      	bhi.n	800464e <UART_SetConfig+0x1a2>
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <UART_SetConfig+0x182>
 8004628:	2b10      	cmp	r3, #16
 800462a:	d008      	beq.n	800463e <UART_SetConfig+0x192>
 800462c:	e00f      	b.n	800464e <UART_SetConfig+0x1a2>
 800462e:	2300      	movs	r3, #0
 8004630:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004634:	e0ad      	b.n	8004792 <UART_SetConfig+0x2e6>
 8004636:	2302      	movs	r3, #2
 8004638:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800463c:	e0a9      	b.n	8004792 <UART_SetConfig+0x2e6>
 800463e:	2304      	movs	r3, #4
 8004640:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004644:	e0a5      	b.n	8004792 <UART_SetConfig+0x2e6>
 8004646:	2308      	movs	r3, #8
 8004648:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800464c:	e0a1      	b.n	8004792 <UART_SetConfig+0x2e6>
 800464e:	2310      	movs	r3, #16
 8004650:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004654:	e09d      	b.n	8004792 <UART_SetConfig+0x2e6>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a4a      	ldr	r2, [pc, #296]	@ (8004784 <UART_SetConfig+0x2d8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d125      	bne.n	80046ac <UART_SetConfig+0x200>
 8004660:	4b45      	ldr	r3, [pc, #276]	@ (8004778 <UART_SetConfig+0x2cc>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004666:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800466a:	2bc0      	cmp	r3, #192	@ 0xc0
 800466c:	d016      	beq.n	800469c <UART_SetConfig+0x1f0>
 800466e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004670:	d818      	bhi.n	80046a4 <UART_SetConfig+0x1f8>
 8004672:	2b80      	cmp	r3, #128	@ 0x80
 8004674:	d00a      	beq.n	800468c <UART_SetConfig+0x1e0>
 8004676:	2b80      	cmp	r3, #128	@ 0x80
 8004678:	d814      	bhi.n	80046a4 <UART_SetConfig+0x1f8>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <UART_SetConfig+0x1d8>
 800467e:	2b40      	cmp	r3, #64	@ 0x40
 8004680:	d008      	beq.n	8004694 <UART_SetConfig+0x1e8>
 8004682:	e00f      	b.n	80046a4 <UART_SetConfig+0x1f8>
 8004684:	2300      	movs	r3, #0
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800468a:	e082      	b.n	8004792 <UART_SetConfig+0x2e6>
 800468c:	2302      	movs	r3, #2
 800468e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004692:	e07e      	b.n	8004792 <UART_SetConfig+0x2e6>
 8004694:	2304      	movs	r3, #4
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800469a:	e07a      	b.n	8004792 <UART_SetConfig+0x2e6>
 800469c:	2308      	movs	r3, #8
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046a2:	e076      	b.n	8004792 <UART_SetConfig+0x2e6>
 80046a4:	2310      	movs	r3, #16
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046aa:	e072      	b.n	8004792 <UART_SetConfig+0x2e6>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a35      	ldr	r2, [pc, #212]	@ (8004788 <UART_SetConfig+0x2dc>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d12a      	bne.n	800470c <UART_SetConfig+0x260>
 80046b6:	4b30      	ldr	r3, [pc, #192]	@ (8004778 <UART_SetConfig+0x2cc>)
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046c4:	d01a      	beq.n	80046fc <UART_SetConfig+0x250>
 80046c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046ca:	d81b      	bhi.n	8004704 <UART_SetConfig+0x258>
 80046cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046d0:	d00c      	beq.n	80046ec <UART_SetConfig+0x240>
 80046d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046d6:	d815      	bhi.n	8004704 <UART_SetConfig+0x258>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <UART_SetConfig+0x238>
 80046dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046e0:	d008      	beq.n	80046f4 <UART_SetConfig+0x248>
 80046e2:	e00f      	b.n	8004704 <UART_SetConfig+0x258>
 80046e4:	2300      	movs	r3, #0
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ea:	e052      	b.n	8004792 <UART_SetConfig+0x2e6>
 80046ec:	2302      	movs	r3, #2
 80046ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046f2:	e04e      	b.n	8004792 <UART_SetConfig+0x2e6>
 80046f4:	2304      	movs	r3, #4
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046fa:	e04a      	b.n	8004792 <UART_SetConfig+0x2e6>
 80046fc:	2308      	movs	r3, #8
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004702:	e046      	b.n	8004792 <UART_SetConfig+0x2e6>
 8004704:	2310      	movs	r3, #16
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800470a:	e042      	b.n	8004792 <UART_SetConfig+0x2e6>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a17      	ldr	r2, [pc, #92]	@ (8004770 <UART_SetConfig+0x2c4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d13a      	bne.n	800478c <UART_SetConfig+0x2e0>
 8004716:	4b18      	ldr	r3, [pc, #96]	@ (8004778 <UART_SetConfig+0x2cc>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004720:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004724:	d01a      	beq.n	800475c <UART_SetConfig+0x2b0>
 8004726:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800472a:	d81b      	bhi.n	8004764 <UART_SetConfig+0x2b8>
 800472c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004730:	d00c      	beq.n	800474c <UART_SetConfig+0x2a0>
 8004732:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004736:	d815      	bhi.n	8004764 <UART_SetConfig+0x2b8>
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <UART_SetConfig+0x298>
 800473c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004740:	d008      	beq.n	8004754 <UART_SetConfig+0x2a8>
 8004742:	e00f      	b.n	8004764 <UART_SetConfig+0x2b8>
 8004744:	2300      	movs	r3, #0
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474a:	e022      	b.n	8004792 <UART_SetConfig+0x2e6>
 800474c:	2302      	movs	r3, #2
 800474e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004752:	e01e      	b.n	8004792 <UART_SetConfig+0x2e6>
 8004754:	2304      	movs	r3, #4
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475a:	e01a      	b.n	8004792 <UART_SetConfig+0x2e6>
 800475c:	2308      	movs	r3, #8
 800475e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004762:	e016      	b.n	8004792 <UART_SetConfig+0x2e6>
 8004764:	2310      	movs	r3, #16
 8004766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800476a:	e012      	b.n	8004792 <UART_SetConfig+0x2e6>
 800476c:	efff69f3 	.word	0xefff69f3
 8004770:	40008000 	.word	0x40008000
 8004774:	40013800 	.word	0x40013800
 8004778:	40021000 	.word	0x40021000
 800477c:	40004400 	.word	0x40004400
 8004780:	40004800 	.word	0x40004800
 8004784:	40004c00 	.word	0x40004c00
 8004788:	40005000 	.word	0x40005000
 800478c:	2310      	movs	r3, #16
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a9f      	ldr	r2, [pc, #636]	@ (8004a14 <UART_SetConfig+0x568>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d17a      	bne.n	8004892 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800479c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d824      	bhi.n	80047ee <UART_SetConfig+0x342>
 80047a4:	a201      	add	r2, pc, #4	@ (adr r2, 80047ac <UART_SetConfig+0x300>)
 80047a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047aa:	bf00      	nop
 80047ac:	080047d1 	.word	0x080047d1
 80047b0:	080047ef 	.word	0x080047ef
 80047b4:	080047d9 	.word	0x080047d9
 80047b8:	080047ef 	.word	0x080047ef
 80047bc:	080047df 	.word	0x080047df
 80047c0:	080047ef 	.word	0x080047ef
 80047c4:	080047ef 	.word	0x080047ef
 80047c8:	080047ef 	.word	0x080047ef
 80047cc:	080047e7 	.word	0x080047e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d0:	f7ff f822 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 80047d4:	61f8      	str	r0, [r7, #28]
        break;
 80047d6:	e010      	b.n	80047fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047d8:	4b8f      	ldr	r3, [pc, #572]	@ (8004a18 <UART_SetConfig+0x56c>)
 80047da:	61fb      	str	r3, [r7, #28]
        break;
 80047dc:	e00d      	b.n	80047fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047de:	f7fe ff83 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 80047e2:	61f8      	str	r0, [r7, #28]
        break;
 80047e4:	e009      	b.n	80047fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ea:	61fb      	str	r3, [r7, #28]
        break;
 80047ec:	e005      	b.n	80047fa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80047f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 80fb 	beq.w	80049f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	4413      	add	r3, r2
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	429a      	cmp	r2, r3
 8004810:	d305      	bcc.n	800481e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	429a      	cmp	r2, r3
 800481c:	d903      	bls.n	8004826 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004824:	e0e8      	b.n	80049f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	2200      	movs	r2, #0
 800482a:	461c      	mov	r4, r3
 800482c:	4615      	mov	r5, r2
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	022b      	lsls	r3, r5, #8
 8004838:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800483c:	0222      	lsls	r2, r4, #8
 800483e:	68f9      	ldr	r1, [r7, #12]
 8004840:	6849      	ldr	r1, [r1, #4]
 8004842:	0849      	lsrs	r1, r1, #1
 8004844:	2000      	movs	r0, #0
 8004846:	4688      	mov	r8, r1
 8004848:	4681      	mov	r9, r0
 800484a:	eb12 0a08 	adds.w	sl, r2, r8
 800484e:	eb43 0b09 	adc.w	fp, r3, r9
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	603b      	str	r3, [r7, #0]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004860:	4650      	mov	r0, sl
 8004862:	4659      	mov	r1, fp
 8004864:	f7fb fd04 	bl	8000270 <__aeabi_uldivmod>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4613      	mov	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004876:	d308      	bcc.n	800488a <UART_SetConfig+0x3de>
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800487e:	d204      	bcs.n	800488a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	60da      	str	r2, [r3, #12]
 8004888:	e0b6      	b.n	80049f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004890:	e0b2      	b.n	80049f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800489a:	d15e      	bne.n	800495a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800489c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d828      	bhi.n	80048f6 <UART_SetConfig+0x44a>
 80048a4:	a201      	add	r2, pc, #4	@ (adr r2, 80048ac <UART_SetConfig+0x400>)
 80048a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048aa:	bf00      	nop
 80048ac:	080048d1 	.word	0x080048d1
 80048b0:	080048d9 	.word	0x080048d9
 80048b4:	080048e1 	.word	0x080048e1
 80048b8:	080048f7 	.word	0x080048f7
 80048bc:	080048e7 	.word	0x080048e7
 80048c0:	080048f7 	.word	0x080048f7
 80048c4:	080048f7 	.word	0x080048f7
 80048c8:	080048f7 	.word	0x080048f7
 80048cc:	080048ef 	.word	0x080048ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d0:	f7fe ffa2 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 80048d4:	61f8      	str	r0, [r7, #28]
        break;
 80048d6:	e014      	b.n	8004902 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d8:	f7fe ffb4 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 80048dc:	61f8      	str	r0, [r7, #28]
        break;
 80048de:	e010      	b.n	8004902 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e0:	4b4d      	ldr	r3, [pc, #308]	@ (8004a18 <UART_SetConfig+0x56c>)
 80048e2:	61fb      	str	r3, [r7, #28]
        break;
 80048e4:	e00d      	b.n	8004902 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e6:	f7fe feff 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 80048ea:	61f8      	str	r0, [r7, #28]
        break;
 80048ec:	e009      	b.n	8004902 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048f2:	61fb      	str	r3, [r7, #28]
        break;
 80048f4:	e005      	b.n	8004902 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004900:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d077      	beq.n	80049f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	005a      	lsls	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	085b      	lsrs	r3, r3, #1
 8004912:	441a      	add	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	fbb2 f3f3 	udiv	r3, r2, r3
 800491c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b0f      	cmp	r3, #15
 8004922:	d916      	bls.n	8004952 <UART_SetConfig+0x4a6>
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800492a:	d212      	bcs.n	8004952 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	b29b      	uxth	r3, r3
 8004930:	f023 030f 	bic.w	r3, r3, #15
 8004934:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	085b      	lsrs	r3, r3, #1
 800493a:	b29b      	uxth	r3, r3
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	b29a      	uxth	r2, r3
 8004942:	8afb      	ldrh	r3, [r7, #22]
 8004944:	4313      	orrs	r3, r2
 8004946:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	8afa      	ldrh	r2, [r7, #22]
 800494e:	60da      	str	r2, [r3, #12]
 8004950:	e052      	b.n	80049f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004958:	e04e      	b.n	80049f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800495a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800495e:	2b08      	cmp	r3, #8
 8004960:	d827      	bhi.n	80049b2 <UART_SetConfig+0x506>
 8004962:	a201      	add	r2, pc, #4	@ (adr r2, 8004968 <UART_SetConfig+0x4bc>)
 8004964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004968:	0800498d 	.word	0x0800498d
 800496c:	08004995 	.word	0x08004995
 8004970:	0800499d 	.word	0x0800499d
 8004974:	080049b3 	.word	0x080049b3
 8004978:	080049a3 	.word	0x080049a3
 800497c:	080049b3 	.word	0x080049b3
 8004980:	080049b3 	.word	0x080049b3
 8004984:	080049b3 	.word	0x080049b3
 8004988:	080049ab 	.word	0x080049ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800498c:	f7fe ff44 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 8004990:	61f8      	str	r0, [r7, #28]
        break;
 8004992:	e014      	b.n	80049be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004994:	f7fe ff56 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 8004998:	61f8      	str	r0, [r7, #28]
        break;
 800499a:	e010      	b.n	80049be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800499c:	4b1e      	ldr	r3, [pc, #120]	@ (8004a18 <UART_SetConfig+0x56c>)
 800499e:	61fb      	str	r3, [r7, #28]
        break;
 80049a0:	e00d      	b.n	80049be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049a2:	f7fe fea1 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 80049a6:	61f8      	str	r0, [r7, #28]
        break;
 80049a8:	e009      	b.n	80049be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ae:	61fb      	str	r3, [r7, #28]
        break;
 80049b0:	e005      	b.n	80049be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049bc:	bf00      	nop
    }

    if (pclk != 0U)
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d019      	beq.n	80049f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	085a      	lsrs	r2, r3, #1
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	441a      	add	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2b0f      	cmp	r3, #15
 80049dc:	d909      	bls.n	80049f2 <UART_SetConfig+0x546>
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049e4:	d205      	bcs.n	80049f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60da      	str	r2, [r3, #12]
 80049f0:	e002      	b.n	80049f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a04:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3728      	adds	r7, #40	@ 0x28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a12:	bf00      	nop
 8004a14:	40008000 	.word	0x40008000
 8004a18:	00f42400 	.word	0x00f42400

08004a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab0:	f003 0310 	and.w	r3, r3, #16
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad2:	f003 0320 	and.w	r3, r3, #32
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01a      	beq.n	8004b32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b1a:	d10a      	bne.n	8004b32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	605a      	str	r2, [r3, #4]
  }
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b098      	sub	sp, #96	@ 0x60
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b70:	f7fc fdd4 	bl	800171c <HAL_GetTick>
 8004b74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d12e      	bne.n	8004be2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f88c 	bl	8004cb0 <UART_WaitOnFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d021      	beq.n	8004be2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba6:	e853 3f00 	ldrex	r3, [r3]
 8004baa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bbe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bc4:	e841 2300 	strex	r3, r2, [r1]
 8004bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1e6      	bne.n	8004b9e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e062      	b.n	8004ca8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d149      	bne.n	8004c84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f856 	bl	8004cb0 <UART_WaitOnFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d03c      	beq.n	8004c84 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	623b      	str	r3, [r7, #32]
   return(result);
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	461a      	mov	r2, r3
 8004c26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c28:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e6      	bne.n	8004c0a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3308      	adds	r3, #8
 8004c42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	e853 3f00 	ldrex	r3, [r3]
 8004c4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 0301 	bic.w	r3, r3, #1
 8004c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3308      	adds	r3, #8
 8004c5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c5c:	61fa      	str	r2, [r7, #28]
 8004c5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	69b9      	ldr	r1, [r7, #24]
 8004c62:	69fa      	ldr	r2, [r7, #28]
 8004c64:	e841 2300 	strex	r3, r2, [r1]
 8004c68:	617b      	str	r3, [r7, #20]
   return(result);
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e5      	bne.n	8004c3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e011      	b.n	8004ca8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2220      	movs	r2, #32
 8004c88:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3758      	adds	r7, #88	@ 0x58
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc0:	e04f      	b.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc8:	d04b      	beq.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cca:	f7fc fd27 	bl	800171c <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d302      	bcc.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e04e      	b.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d037      	beq.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b80      	cmp	r3, #128	@ 0x80
 8004cf6:	d034      	beq.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b40      	cmp	r3, #64	@ 0x40
 8004cfc:	d031      	beq.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d110      	bne.n	8004d2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2208      	movs	r2, #8
 8004d12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f838 	bl	8004d8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2208      	movs	r2, #8
 8004d1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e029      	b.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d3c:	d111      	bne.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f81e 	bl	8004d8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e00f      	b.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	bf0c      	ite	eq
 8004d72:	2301      	moveq	r3, #1
 8004d74:	2300      	movne	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	461a      	mov	r2, r3
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d0a0      	beq.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b095      	sub	sp, #84	@ 0x54
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d9a:	e853 3f00 	ldrex	r3, [r3]
 8004d9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004db0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004db2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004db6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004db8:	e841 2300 	strex	r3, r2, [r1]
 8004dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e6      	bne.n	8004d92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3308      	adds	r3, #8
 8004dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f023 0301 	bic.w	r3, r3, #1
 8004dda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3308      	adds	r3, #8
 8004de2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004de4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e5      	bne.n	8004dc4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d118      	bne.n	8004e32 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f023 0310 	bic.w	r3, r3, #16
 8004e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	6979      	ldr	r1, [r7, #20]
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e6      	bne.n	8004e00 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e46:	bf00      	nop
 8004e48:	3754      	adds	r7, #84	@ 0x54
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e52:	b084      	sub	sp, #16
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	f107 001c 	add.w	r0, r7, #28
 8004e60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fa69 	bl	8005348 <USB_CoreReset>
 8004e76:	4603      	mov	r3, r0
 8004e78:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004e7a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e86:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e8e:	e005      	b.n	8004e9c <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e94:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ea8:	b004      	add	sp, #16
 8004eaa:	4770      	bx	lr

08004eac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f023 0201 	bic.w	r2, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004eea:	78fb      	ldrb	r3, [r7, #3]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d115      	bne.n	8004f1c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004efc:	200a      	movs	r0, #10
 8004efe:	f7fc fc19 	bl	8001734 <HAL_Delay>
      ms += 10U;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	330a      	adds	r3, #10
 8004f06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fa0f 	bl	800532c <USB_GetMode>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d01e      	beq.n	8004f52 <USB_SetCurrentMode+0x84>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f18:	d9f0      	bls.n	8004efc <USB_SetCurrentMode+0x2e>
 8004f1a:	e01a      	b.n	8004f52 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d115      	bne.n	8004f4e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f2e:	200a      	movs	r0, #10
 8004f30:	f7fc fc00 	bl	8001734 <HAL_Delay>
      ms += 10U;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	330a      	adds	r3, #10
 8004f38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f9f6 	bl	800532c <USB_GetMode>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d005      	beq.n	8004f52 <USB_SetCurrentMode+0x84>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f4a:	d9f0      	bls.n	8004f2e <USB_SetCurrentMode+0x60>
 8004f4c:	e001      	b.n	8004f52 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e005      	b.n	8004f5e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2bc8      	cmp	r3, #200	@ 0xc8
 8004f56:	d101      	bne.n	8004f5c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f68:	b084      	sub	sp, #16
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b086      	sub	sp, #24
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f82:	2300      	movs	r3, #0
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	e009      	b.n	8004f9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	3340      	adds	r3, #64	@ 0x40
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	2200      	movs	r2, #0
 8004f94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	2b0e      	cmp	r3, #14
 8004fa0:	d9f2      	bls.n	8004f88 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fa2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d11c      	bne.n	8004fe4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fb8:	f043 0302 	orr.w	r3, r3, #2
 8004fbc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	e005      	b.n	8004ff0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ffc:	2103      	movs	r1, #3
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f95a 	bl	80052b8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005004:	2110      	movs	r1, #16
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f8f6 	bl	80051f8 <USB_FlushTxFifo>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f920 	bl	800525c <USB_FlushRxFifo>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800502c:	461a      	mov	r2, r3
 800502e:	2300      	movs	r3, #0
 8005030:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005038:	461a      	mov	r2, r3
 800503a:	2300      	movs	r3, #0
 800503c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005044:	461a      	mov	r2, r3
 8005046:	2300      	movs	r3, #0
 8005048:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800504a:	2300      	movs	r3, #0
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	e043      	b.n	80050d8 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005062:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005066:	d118      	bne.n	800509a <USB_DevInit+0x132>
    {
      if (i == 0U)
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800507a:	461a      	mov	r2, r3
 800507c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	e013      	b.n	80050ac <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005090:	461a      	mov	r2, r3
 8005092:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	e008      	b.n	80050ac <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050a6:	461a      	mov	r2, r3
 80050a8:	2300      	movs	r3, #0
 80050aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b8:	461a      	mov	r2, r3
 80050ba:	2300      	movs	r3, #0
 80050bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ca:	461a      	mov	r2, r3
 80050cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	3301      	adds	r3, #1
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80050dc:	461a      	mov	r2, r3
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d3b5      	bcc.n	8005050 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050e4:	2300      	movs	r3, #0
 80050e6:	613b      	str	r3, [r7, #16]
 80050e8:	e043      	b.n	8005172 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005100:	d118      	bne.n	8005134 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005114:	461a      	mov	r2, r3
 8005116:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	e013      	b.n	8005146 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800512a:	461a      	mov	r2, r3
 800512c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	e008      	b.n	8005146 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005140:	461a      	mov	r2, r3
 8005142:	2300      	movs	r3, #0
 8005144:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005152:	461a      	mov	r2, r3
 8005154:	2300      	movs	r3, #0
 8005156:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005164:	461a      	mov	r2, r3
 8005166:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800516a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	3301      	adds	r3, #1
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005176:	461a      	mov	r2, r3
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4293      	cmp	r3, r2
 800517c:	d3b5      	bcc.n	80050ea <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800518c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005190:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800519e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	f043 0210 	orr.w	r2, r3, #16
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699a      	ldr	r2, [r3, #24]
 80051b0:	4b10      	ldr	r3, [pc, #64]	@ (80051f4 <USB_DevInit+0x28c>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d005      	beq.n	80051cc <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f043 0208 	orr.w	r2, r3, #8
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d107      	bne.n	80051e4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051dc:	f043 0304 	orr.w	r3, r3, #4
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051f0:	b004      	add	sp, #16
 80051f2:	4770      	bx	lr
 80051f4:	803c3800 	.word	0x803c3800

080051f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3301      	adds	r3, #1
 800520a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005212:	d901      	bls.n	8005218 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e01b      	b.n	8005250 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	daf2      	bge.n	8005206 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	019b      	lsls	r3, r3, #6
 8005228:	f043 0220 	orr.w	r2, r3, #32
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3301      	adds	r3, #1
 8005234:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800523c:	d901      	bls.n	8005242 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e006      	b.n	8005250 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b20      	cmp	r3, #32
 800524c:	d0f0      	beq.n	8005230 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3301      	adds	r3, #1
 800526c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005274:	d901      	bls.n	800527a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e018      	b.n	80052ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	daf2      	bge.n	8005268 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2210      	movs	r2, #16
 800528a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	3301      	adds	r3, #1
 8005290:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005298:	d901      	bls.n	800529e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e006      	b.n	80052ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	2b10      	cmp	r3, #16
 80052a8:	d0f0      	beq.n	800528c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	68f9      	ldr	r1, [r7, #12]
 80052d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052d8:	4313      	orrs	r3, r2
 80052da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b085      	sub	sp, #20
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005304:	f023 0303 	bic.w	r3, r3, #3
 8005308:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005318:	f043 0302 	orr.w	r3, r3, #2
 800531c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	f003 0301 	and.w	r3, r3, #1
}
 800533c:	4618      	mov	r0, r3
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3301      	adds	r3, #1
 8005358:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005360:	d901      	bls.n	8005366 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e01b      	b.n	800539e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	daf2      	bge.n	8005354 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f043 0201 	orr.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3301      	adds	r3, #1
 8005382:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800538a:	d901      	bls.n	8005390 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e006      	b.n	800539e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b01      	cmp	r3, #1
 800539a:	d0f0      	beq.n	800537e <USB_CoreReset+0x36>

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
	...

080053ac <siprintf>:
 80053ac:	b40e      	push	{r1, r2, r3}
 80053ae:	b500      	push	{lr}
 80053b0:	b09c      	sub	sp, #112	@ 0x70
 80053b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80053b4:	9002      	str	r0, [sp, #8]
 80053b6:	9006      	str	r0, [sp, #24]
 80053b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80053bc:	4809      	ldr	r0, [pc, #36]	@ (80053e4 <siprintf+0x38>)
 80053be:	9107      	str	r1, [sp, #28]
 80053c0:	9104      	str	r1, [sp, #16]
 80053c2:	4909      	ldr	r1, [pc, #36]	@ (80053e8 <siprintf+0x3c>)
 80053c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053c8:	9105      	str	r1, [sp, #20]
 80053ca:	6800      	ldr	r0, [r0, #0]
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	a902      	add	r1, sp, #8
 80053d0:	f000 f994 	bl	80056fc <_svfiprintf_r>
 80053d4:	9b02      	ldr	r3, [sp, #8]
 80053d6:	2200      	movs	r2, #0
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	b01c      	add	sp, #112	@ 0x70
 80053dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80053e0:	b003      	add	sp, #12
 80053e2:	4770      	bx	lr
 80053e4:	2000000c 	.word	0x2000000c
 80053e8:	ffff0208 	.word	0xffff0208

080053ec <memset>:
 80053ec:	4402      	add	r2, r0
 80053ee:	4603      	mov	r3, r0
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d100      	bne.n	80053f6 <memset+0xa>
 80053f4:	4770      	bx	lr
 80053f6:	f803 1b01 	strb.w	r1, [r3], #1
 80053fa:	e7f9      	b.n	80053f0 <memset+0x4>

080053fc <__errno>:
 80053fc:	4b01      	ldr	r3, [pc, #4]	@ (8005404 <__errno+0x8>)
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	2000000c 	.word	0x2000000c

08005408 <__libc_init_array>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	4d0d      	ldr	r5, [pc, #52]	@ (8005440 <__libc_init_array+0x38>)
 800540c:	4c0d      	ldr	r4, [pc, #52]	@ (8005444 <__libc_init_array+0x3c>)
 800540e:	1b64      	subs	r4, r4, r5
 8005410:	10a4      	asrs	r4, r4, #2
 8005412:	2600      	movs	r6, #0
 8005414:	42a6      	cmp	r6, r4
 8005416:	d109      	bne.n	800542c <__libc_init_array+0x24>
 8005418:	4d0b      	ldr	r5, [pc, #44]	@ (8005448 <__libc_init_array+0x40>)
 800541a:	4c0c      	ldr	r4, [pc, #48]	@ (800544c <__libc_init_array+0x44>)
 800541c:	f000 fc66 	bl	8005cec <_init>
 8005420:	1b64      	subs	r4, r4, r5
 8005422:	10a4      	asrs	r4, r4, #2
 8005424:	2600      	movs	r6, #0
 8005426:	42a6      	cmp	r6, r4
 8005428:	d105      	bne.n	8005436 <__libc_init_array+0x2e>
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005430:	4798      	blx	r3
 8005432:	3601      	adds	r6, #1
 8005434:	e7ee      	b.n	8005414 <__libc_init_array+0xc>
 8005436:	f855 3b04 	ldr.w	r3, [r5], #4
 800543a:	4798      	blx	r3
 800543c:	3601      	adds	r6, #1
 800543e:	e7f2      	b.n	8005426 <__libc_init_array+0x1e>
 8005440:	08005d8c 	.word	0x08005d8c
 8005444:	08005d8c 	.word	0x08005d8c
 8005448:	08005d8c 	.word	0x08005d8c
 800544c:	08005d90 	.word	0x08005d90

08005450 <__retarget_lock_acquire_recursive>:
 8005450:	4770      	bx	lr

08005452 <__retarget_lock_release_recursive>:
 8005452:	4770      	bx	lr

08005454 <_free_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4605      	mov	r5, r0
 8005458:	2900      	cmp	r1, #0
 800545a:	d041      	beq.n	80054e0 <_free_r+0x8c>
 800545c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005460:	1f0c      	subs	r4, r1, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	bfb8      	it	lt
 8005466:	18e4      	addlt	r4, r4, r3
 8005468:	f000 f8e0 	bl	800562c <__malloc_lock>
 800546c:	4a1d      	ldr	r2, [pc, #116]	@ (80054e4 <_free_r+0x90>)
 800546e:	6813      	ldr	r3, [r2, #0]
 8005470:	b933      	cbnz	r3, 8005480 <_free_r+0x2c>
 8005472:	6063      	str	r3, [r4, #4]
 8005474:	6014      	str	r4, [r2, #0]
 8005476:	4628      	mov	r0, r5
 8005478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800547c:	f000 b8dc 	b.w	8005638 <__malloc_unlock>
 8005480:	42a3      	cmp	r3, r4
 8005482:	d908      	bls.n	8005496 <_free_r+0x42>
 8005484:	6820      	ldr	r0, [r4, #0]
 8005486:	1821      	adds	r1, r4, r0
 8005488:	428b      	cmp	r3, r1
 800548a:	bf01      	itttt	eq
 800548c:	6819      	ldreq	r1, [r3, #0]
 800548e:	685b      	ldreq	r3, [r3, #4]
 8005490:	1809      	addeq	r1, r1, r0
 8005492:	6021      	streq	r1, [r4, #0]
 8005494:	e7ed      	b.n	8005472 <_free_r+0x1e>
 8005496:	461a      	mov	r2, r3
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	b10b      	cbz	r3, 80054a0 <_free_r+0x4c>
 800549c:	42a3      	cmp	r3, r4
 800549e:	d9fa      	bls.n	8005496 <_free_r+0x42>
 80054a0:	6811      	ldr	r1, [r2, #0]
 80054a2:	1850      	adds	r0, r2, r1
 80054a4:	42a0      	cmp	r0, r4
 80054a6:	d10b      	bne.n	80054c0 <_free_r+0x6c>
 80054a8:	6820      	ldr	r0, [r4, #0]
 80054aa:	4401      	add	r1, r0
 80054ac:	1850      	adds	r0, r2, r1
 80054ae:	4283      	cmp	r3, r0
 80054b0:	6011      	str	r1, [r2, #0]
 80054b2:	d1e0      	bne.n	8005476 <_free_r+0x22>
 80054b4:	6818      	ldr	r0, [r3, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	6053      	str	r3, [r2, #4]
 80054ba:	4408      	add	r0, r1
 80054bc:	6010      	str	r0, [r2, #0]
 80054be:	e7da      	b.n	8005476 <_free_r+0x22>
 80054c0:	d902      	bls.n	80054c8 <_free_r+0x74>
 80054c2:	230c      	movs	r3, #12
 80054c4:	602b      	str	r3, [r5, #0]
 80054c6:	e7d6      	b.n	8005476 <_free_r+0x22>
 80054c8:	6820      	ldr	r0, [r4, #0]
 80054ca:	1821      	adds	r1, r4, r0
 80054cc:	428b      	cmp	r3, r1
 80054ce:	bf04      	itt	eq
 80054d0:	6819      	ldreq	r1, [r3, #0]
 80054d2:	685b      	ldreq	r3, [r3, #4]
 80054d4:	6063      	str	r3, [r4, #4]
 80054d6:	bf04      	itt	eq
 80054d8:	1809      	addeq	r1, r1, r0
 80054da:	6021      	streq	r1, [r4, #0]
 80054dc:	6054      	str	r4, [r2, #4]
 80054de:	e7ca      	b.n	8005476 <_free_r+0x22>
 80054e0:	bd38      	pop	{r3, r4, r5, pc}
 80054e2:	bf00      	nop
 80054e4:	20000968 	.word	0x20000968

080054e8 <sbrk_aligned>:
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	4e0f      	ldr	r6, [pc, #60]	@ (8005528 <sbrk_aligned+0x40>)
 80054ec:	460c      	mov	r4, r1
 80054ee:	6831      	ldr	r1, [r6, #0]
 80054f0:	4605      	mov	r5, r0
 80054f2:	b911      	cbnz	r1, 80054fa <sbrk_aligned+0x12>
 80054f4:	f000 fba6 	bl	8005c44 <_sbrk_r>
 80054f8:	6030      	str	r0, [r6, #0]
 80054fa:	4621      	mov	r1, r4
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 fba1 	bl	8005c44 <_sbrk_r>
 8005502:	1c43      	adds	r3, r0, #1
 8005504:	d103      	bne.n	800550e <sbrk_aligned+0x26>
 8005506:	f04f 34ff 	mov.w	r4, #4294967295
 800550a:	4620      	mov	r0, r4
 800550c:	bd70      	pop	{r4, r5, r6, pc}
 800550e:	1cc4      	adds	r4, r0, #3
 8005510:	f024 0403 	bic.w	r4, r4, #3
 8005514:	42a0      	cmp	r0, r4
 8005516:	d0f8      	beq.n	800550a <sbrk_aligned+0x22>
 8005518:	1a21      	subs	r1, r4, r0
 800551a:	4628      	mov	r0, r5
 800551c:	f000 fb92 	bl	8005c44 <_sbrk_r>
 8005520:	3001      	adds	r0, #1
 8005522:	d1f2      	bne.n	800550a <sbrk_aligned+0x22>
 8005524:	e7ef      	b.n	8005506 <sbrk_aligned+0x1e>
 8005526:	bf00      	nop
 8005528:	20000964 	.word	0x20000964

0800552c <_malloc_r>:
 800552c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005530:	1ccd      	adds	r5, r1, #3
 8005532:	f025 0503 	bic.w	r5, r5, #3
 8005536:	3508      	adds	r5, #8
 8005538:	2d0c      	cmp	r5, #12
 800553a:	bf38      	it	cc
 800553c:	250c      	movcc	r5, #12
 800553e:	2d00      	cmp	r5, #0
 8005540:	4606      	mov	r6, r0
 8005542:	db01      	blt.n	8005548 <_malloc_r+0x1c>
 8005544:	42a9      	cmp	r1, r5
 8005546:	d904      	bls.n	8005552 <_malloc_r+0x26>
 8005548:	230c      	movs	r3, #12
 800554a:	6033      	str	r3, [r6, #0]
 800554c:	2000      	movs	r0, #0
 800554e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005552:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005628 <_malloc_r+0xfc>
 8005556:	f000 f869 	bl	800562c <__malloc_lock>
 800555a:	f8d8 3000 	ldr.w	r3, [r8]
 800555e:	461c      	mov	r4, r3
 8005560:	bb44      	cbnz	r4, 80055b4 <_malloc_r+0x88>
 8005562:	4629      	mov	r1, r5
 8005564:	4630      	mov	r0, r6
 8005566:	f7ff ffbf 	bl	80054e8 <sbrk_aligned>
 800556a:	1c43      	adds	r3, r0, #1
 800556c:	4604      	mov	r4, r0
 800556e:	d158      	bne.n	8005622 <_malloc_r+0xf6>
 8005570:	f8d8 4000 	ldr.w	r4, [r8]
 8005574:	4627      	mov	r7, r4
 8005576:	2f00      	cmp	r7, #0
 8005578:	d143      	bne.n	8005602 <_malloc_r+0xd6>
 800557a:	2c00      	cmp	r4, #0
 800557c:	d04b      	beq.n	8005616 <_malloc_r+0xea>
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	4639      	mov	r1, r7
 8005582:	4630      	mov	r0, r6
 8005584:	eb04 0903 	add.w	r9, r4, r3
 8005588:	f000 fb5c 	bl	8005c44 <_sbrk_r>
 800558c:	4581      	cmp	r9, r0
 800558e:	d142      	bne.n	8005616 <_malloc_r+0xea>
 8005590:	6821      	ldr	r1, [r4, #0]
 8005592:	1a6d      	subs	r5, r5, r1
 8005594:	4629      	mov	r1, r5
 8005596:	4630      	mov	r0, r6
 8005598:	f7ff ffa6 	bl	80054e8 <sbrk_aligned>
 800559c:	3001      	adds	r0, #1
 800559e:	d03a      	beq.n	8005616 <_malloc_r+0xea>
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	442b      	add	r3, r5
 80055a4:	6023      	str	r3, [r4, #0]
 80055a6:	f8d8 3000 	ldr.w	r3, [r8]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	bb62      	cbnz	r2, 8005608 <_malloc_r+0xdc>
 80055ae:	f8c8 7000 	str.w	r7, [r8]
 80055b2:	e00f      	b.n	80055d4 <_malloc_r+0xa8>
 80055b4:	6822      	ldr	r2, [r4, #0]
 80055b6:	1b52      	subs	r2, r2, r5
 80055b8:	d420      	bmi.n	80055fc <_malloc_r+0xd0>
 80055ba:	2a0b      	cmp	r2, #11
 80055bc:	d917      	bls.n	80055ee <_malloc_r+0xc2>
 80055be:	1961      	adds	r1, r4, r5
 80055c0:	42a3      	cmp	r3, r4
 80055c2:	6025      	str	r5, [r4, #0]
 80055c4:	bf18      	it	ne
 80055c6:	6059      	strne	r1, [r3, #4]
 80055c8:	6863      	ldr	r3, [r4, #4]
 80055ca:	bf08      	it	eq
 80055cc:	f8c8 1000 	streq.w	r1, [r8]
 80055d0:	5162      	str	r2, [r4, r5]
 80055d2:	604b      	str	r3, [r1, #4]
 80055d4:	4630      	mov	r0, r6
 80055d6:	f000 f82f 	bl	8005638 <__malloc_unlock>
 80055da:	f104 000b 	add.w	r0, r4, #11
 80055de:	1d23      	adds	r3, r4, #4
 80055e0:	f020 0007 	bic.w	r0, r0, #7
 80055e4:	1ac2      	subs	r2, r0, r3
 80055e6:	bf1c      	itt	ne
 80055e8:	1a1b      	subne	r3, r3, r0
 80055ea:	50a3      	strne	r3, [r4, r2]
 80055ec:	e7af      	b.n	800554e <_malloc_r+0x22>
 80055ee:	6862      	ldr	r2, [r4, #4]
 80055f0:	42a3      	cmp	r3, r4
 80055f2:	bf0c      	ite	eq
 80055f4:	f8c8 2000 	streq.w	r2, [r8]
 80055f8:	605a      	strne	r2, [r3, #4]
 80055fa:	e7eb      	b.n	80055d4 <_malloc_r+0xa8>
 80055fc:	4623      	mov	r3, r4
 80055fe:	6864      	ldr	r4, [r4, #4]
 8005600:	e7ae      	b.n	8005560 <_malloc_r+0x34>
 8005602:	463c      	mov	r4, r7
 8005604:	687f      	ldr	r7, [r7, #4]
 8005606:	e7b6      	b.n	8005576 <_malloc_r+0x4a>
 8005608:	461a      	mov	r2, r3
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	42a3      	cmp	r3, r4
 800560e:	d1fb      	bne.n	8005608 <_malloc_r+0xdc>
 8005610:	2300      	movs	r3, #0
 8005612:	6053      	str	r3, [r2, #4]
 8005614:	e7de      	b.n	80055d4 <_malloc_r+0xa8>
 8005616:	230c      	movs	r3, #12
 8005618:	6033      	str	r3, [r6, #0]
 800561a:	4630      	mov	r0, r6
 800561c:	f000 f80c 	bl	8005638 <__malloc_unlock>
 8005620:	e794      	b.n	800554c <_malloc_r+0x20>
 8005622:	6005      	str	r5, [r0, #0]
 8005624:	e7d6      	b.n	80055d4 <_malloc_r+0xa8>
 8005626:	bf00      	nop
 8005628:	20000968 	.word	0x20000968

0800562c <__malloc_lock>:
 800562c:	4801      	ldr	r0, [pc, #4]	@ (8005634 <__malloc_lock+0x8>)
 800562e:	f7ff bf0f 	b.w	8005450 <__retarget_lock_acquire_recursive>
 8005632:	bf00      	nop
 8005634:	20000960 	.word	0x20000960

08005638 <__malloc_unlock>:
 8005638:	4801      	ldr	r0, [pc, #4]	@ (8005640 <__malloc_unlock+0x8>)
 800563a:	f7ff bf0a 	b.w	8005452 <__retarget_lock_release_recursive>
 800563e:	bf00      	nop
 8005640:	20000960 	.word	0x20000960

08005644 <__ssputs_r>:
 8005644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005648:	688e      	ldr	r6, [r1, #8]
 800564a:	461f      	mov	r7, r3
 800564c:	42be      	cmp	r6, r7
 800564e:	680b      	ldr	r3, [r1, #0]
 8005650:	4682      	mov	sl, r0
 8005652:	460c      	mov	r4, r1
 8005654:	4690      	mov	r8, r2
 8005656:	d82d      	bhi.n	80056b4 <__ssputs_r+0x70>
 8005658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800565c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005660:	d026      	beq.n	80056b0 <__ssputs_r+0x6c>
 8005662:	6965      	ldr	r5, [r4, #20]
 8005664:	6909      	ldr	r1, [r1, #16]
 8005666:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800566a:	eba3 0901 	sub.w	r9, r3, r1
 800566e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005672:	1c7b      	adds	r3, r7, #1
 8005674:	444b      	add	r3, r9
 8005676:	106d      	asrs	r5, r5, #1
 8005678:	429d      	cmp	r5, r3
 800567a:	bf38      	it	cc
 800567c:	461d      	movcc	r5, r3
 800567e:	0553      	lsls	r3, r2, #21
 8005680:	d527      	bpl.n	80056d2 <__ssputs_r+0x8e>
 8005682:	4629      	mov	r1, r5
 8005684:	f7ff ff52 	bl	800552c <_malloc_r>
 8005688:	4606      	mov	r6, r0
 800568a:	b360      	cbz	r0, 80056e6 <__ssputs_r+0xa2>
 800568c:	6921      	ldr	r1, [r4, #16]
 800568e:	464a      	mov	r2, r9
 8005690:	f000 fae8 	bl	8005c64 <memcpy>
 8005694:	89a3      	ldrh	r3, [r4, #12]
 8005696:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800569a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800569e:	81a3      	strh	r3, [r4, #12]
 80056a0:	6126      	str	r6, [r4, #16]
 80056a2:	6165      	str	r5, [r4, #20]
 80056a4:	444e      	add	r6, r9
 80056a6:	eba5 0509 	sub.w	r5, r5, r9
 80056aa:	6026      	str	r6, [r4, #0]
 80056ac:	60a5      	str	r5, [r4, #8]
 80056ae:	463e      	mov	r6, r7
 80056b0:	42be      	cmp	r6, r7
 80056b2:	d900      	bls.n	80056b6 <__ssputs_r+0x72>
 80056b4:	463e      	mov	r6, r7
 80056b6:	6820      	ldr	r0, [r4, #0]
 80056b8:	4632      	mov	r2, r6
 80056ba:	4641      	mov	r1, r8
 80056bc:	f000 faa8 	bl	8005c10 <memmove>
 80056c0:	68a3      	ldr	r3, [r4, #8]
 80056c2:	1b9b      	subs	r3, r3, r6
 80056c4:	60a3      	str	r3, [r4, #8]
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	4433      	add	r3, r6
 80056ca:	6023      	str	r3, [r4, #0]
 80056cc:	2000      	movs	r0, #0
 80056ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d2:	462a      	mov	r2, r5
 80056d4:	f000 fad4 	bl	8005c80 <_realloc_r>
 80056d8:	4606      	mov	r6, r0
 80056da:	2800      	cmp	r0, #0
 80056dc:	d1e0      	bne.n	80056a0 <__ssputs_r+0x5c>
 80056de:	6921      	ldr	r1, [r4, #16]
 80056e0:	4650      	mov	r0, sl
 80056e2:	f7ff feb7 	bl	8005454 <_free_r>
 80056e6:	230c      	movs	r3, #12
 80056e8:	f8ca 3000 	str.w	r3, [sl]
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056f2:	81a3      	strh	r3, [r4, #12]
 80056f4:	f04f 30ff 	mov.w	r0, #4294967295
 80056f8:	e7e9      	b.n	80056ce <__ssputs_r+0x8a>
	...

080056fc <_svfiprintf_r>:
 80056fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005700:	4698      	mov	r8, r3
 8005702:	898b      	ldrh	r3, [r1, #12]
 8005704:	061b      	lsls	r3, r3, #24
 8005706:	b09d      	sub	sp, #116	@ 0x74
 8005708:	4607      	mov	r7, r0
 800570a:	460d      	mov	r5, r1
 800570c:	4614      	mov	r4, r2
 800570e:	d510      	bpl.n	8005732 <_svfiprintf_r+0x36>
 8005710:	690b      	ldr	r3, [r1, #16]
 8005712:	b973      	cbnz	r3, 8005732 <_svfiprintf_r+0x36>
 8005714:	2140      	movs	r1, #64	@ 0x40
 8005716:	f7ff ff09 	bl	800552c <_malloc_r>
 800571a:	6028      	str	r0, [r5, #0]
 800571c:	6128      	str	r0, [r5, #16]
 800571e:	b930      	cbnz	r0, 800572e <_svfiprintf_r+0x32>
 8005720:	230c      	movs	r3, #12
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	f04f 30ff 	mov.w	r0, #4294967295
 8005728:	b01d      	add	sp, #116	@ 0x74
 800572a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800572e:	2340      	movs	r3, #64	@ 0x40
 8005730:	616b      	str	r3, [r5, #20]
 8005732:	2300      	movs	r3, #0
 8005734:	9309      	str	r3, [sp, #36]	@ 0x24
 8005736:	2320      	movs	r3, #32
 8005738:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800573c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005740:	2330      	movs	r3, #48	@ 0x30
 8005742:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80058e0 <_svfiprintf_r+0x1e4>
 8005746:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800574a:	f04f 0901 	mov.w	r9, #1
 800574e:	4623      	mov	r3, r4
 8005750:	469a      	mov	sl, r3
 8005752:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005756:	b10a      	cbz	r2, 800575c <_svfiprintf_r+0x60>
 8005758:	2a25      	cmp	r2, #37	@ 0x25
 800575a:	d1f9      	bne.n	8005750 <_svfiprintf_r+0x54>
 800575c:	ebba 0b04 	subs.w	fp, sl, r4
 8005760:	d00b      	beq.n	800577a <_svfiprintf_r+0x7e>
 8005762:	465b      	mov	r3, fp
 8005764:	4622      	mov	r2, r4
 8005766:	4629      	mov	r1, r5
 8005768:	4638      	mov	r0, r7
 800576a:	f7ff ff6b 	bl	8005644 <__ssputs_r>
 800576e:	3001      	adds	r0, #1
 8005770:	f000 80a7 	beq.w	80058c2 <_svfiprintf_r+0x1c6>
 8005774:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005776:	445a      	add	r2, fp
 8005778:	9209      	str	r2, [sp, #36]	@ 0x24
 800577a:	f89a 3000 	ldrb.w	r3, [sl]
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 809f 	beq.w	80058c2 <_svfiprintf_r+0x1c6>
 8005784:	2300      	movs	r3, #0
 8005786:	f04f 32ff 	mov.w	r2, #4294967295
 800578a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800578e:	f10a 0a01 	add.w	sl, sl, #1
 8005792:	9304      	str	r3, [sp, #16]
 8005794:	9307      	str	r3, [sp, #28]
 8005796:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800579a:	931a      	str	r3, [sp, #104]	@ 0x68
 800579c:	4654      	mov	r4, sl
 800579e:	2205      	movs	r2, #5
 80057a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057a4:	484e      	ldr	r0, [pc, #312]	@ (80058e0 <_svfiprintf_r+0x1e4>)
 80057a6:	f7fa fd13 	bl	80001d0 <memchr>
 80057aa:	9a04      	ldr	r2, [sp, #16]
 80057ac:	b9d8      	cbnz	r0, 80057e6 <_svfiprintf_r+0xea>
 80057ae:	06d0      	lsls	r0, r2, #27
 80057b0:	bf44      	itt	mi
 80057b2:	2320      	movmi	r3, #32
 80057b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057b8:	0711      	lsls	r1, r2, #28
 80057ba:	bf44      	itt	mi
 80057bc:	232b      	movmi	r3, #43	@ 0x2b
 80057be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057c2:	f89a 3000 	ldrb.w	r3, [sl]
 80057c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80057c8:	d015      	beq.n	80057f6 <_svfiprintf_r+0xfa>
 80057ca:	9a07      	ldr	r2, [sp, #28]
 80057cc:	4654      	mov	r4, sl
 80057ce:	2000      	movs	r0, #0
 80057d0:	f04f 0c0a 	mov.w	ip, #10
 80057d4:	4621      	mov	r1, r4
 80057d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057da:	3b30      	subs	r3, #48	@ 0x30
 80057dc:	2b09      	cmp	r3, #9
 80057de:	d94b      	bls.n	8005878 <_svfiprintf_r+0x17c>
 80057e0:	b1b0      	cbz	r0, 8005810 <_svfiprintf_r+0x114>
 80057e2:	9207      	str	r2, [sp, #28]
 80057e4:	e014      	b.n	8005810 <_svfiprintf_r+0x114>
 80057e6:	eba0 0308 	sub.w	r3, r0, r8
 80057ea:	fa09 f303 	lsl.w	r3, r9, r3
 80057ee:	4313      	orrs	r3, r2
 80057f0:	9304      	str	r3, [sp, #16]
 80057f2:	46a2      	mov	sl, r4
 80057f4:	e7d2      	b.n	800579c <_svfiprintf_r+0xa0>
 80057f6:	9b03      	ldr	r3, [sp, #12]
 80057f8:	1d19      	adds	r1, r3, #4
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	9103      	str	r1, [sp, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	bfbb      	ittet	lt
 8005802:	425b      	neglt	r3, r3
 8005804:	f042 0202 	orrlt.w	r2, r2, #2
 8005808:	9307      	strge	r3, [sp, #28]
 800580a:	9307      	strlt	r3, [sp, #28]
 800580c:	bfb8      	it	lt
 800580e:	9204      	strlt	r2, [sp, #16]
 8005810:	7823      	ldrb	r3, [r4, #0]
 8005812:	2b2e      	cmp	r3, #46	@ 0x2e
 8005814:	d10a      	bne.n	800582c <_svfiprintf_r+0x130>
 8005816:	7863      	ldrb	r3, [r4, #1]
 8005818:	2b2a      	cmp	r3, #42	@ 0x2a
 800581a:	d132      	bne.n	8005882 <_svfiprintf_r+0x186>
 800581c:	9b03      	ldr	r3, [sp, #12]
 800581e:	1d1a      	adds	r2, r3, #4
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	9203      	str	r2, [sp, #12]
 8005824:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005828:	3402      	adds	r4, #2
 800582a:	9305      	str	r3, [sp, #20]
 800582c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80058f0 <_svfiprintf_r+0x1f4>
 8005830:	7821      	ldrb	r1, [r4, #0]
 8005832:	2203      	movs	r2, #3
 8005834:	4650      	mov	r0, sl
 8005836:	f7fa fccb 	bl	80001d0 <memchr>
 800583a:	b138      	cbz	r0, 800584c <_svfiprintf_r+0x150>
 800583c:	9b04      	ldr	r3, [sp, #16]
 800583e:	eba0 000a 	sub.w	r0, r0, sl
 8005842:	2240      	movs	r2, #64	@ 0x40
 8005844:	4082      	lsls	r2, r0
 8005846:	4313      	orrs	r3, r2
 8005848:	3401      	adds	r4, #1
 800584a:	9304      	str	r3, [sp, #16]
 800584c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005850:	4824      	ldr	r0, [pc, #144]	@ (80058e4 <_svfiprintf_r+0x1e8>)
 8005852:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005856:	2206      	movs	r2, #6
 8005858:	f7fa fcba 	bl	80001d0 <memchr>
 800585c:	2800      	cmp	r0, #0
 800585e:	d036      	beq.n	80058ce <_svfiprintf_r+0x1d2>
 8005860:	4b21      	ldr	r3, [pc, #132]	@ (80058e8 <_svfiprintf_r+0x1ec>)
 8005862:	bb1b      	cbnz	r3, 80058ac <_svfiprintf_r+0x1b0>
 8005864:	9b03      	ldr	r3, [sp, #12]
 8005866:	3307      	adds	r3, #7
 8005868:	f023 0307 	bic.w	r3, r3, #7
 800586c:	3308      	adds	r3, #8
 800586e:	9303      	str	r3, [sp, #12]
 8005870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005872:	4433      	add	r3, r6
 8005874:	9309      	str	r3, [sp, #36]	@ 0x24
 8005876:	e76a      	b.n	800574e <_svfiprintf_r+0x52>
 8005878:	fb0c 3202 	mla	r2, ip, r2, r3
 800587c:	460c      	mov	r4, r1
 800587e:	2001      	movs	r0, #1
 8005880:	e7a8      	b.n	80057d4 <_svfiprintf_r+0xd8>
 8005882:	2300      	movs	r3, #0
 8005884:	3401      	adds	r4, #1
 8005886:	9305      	str	r3, [sp, #20]
 8005888:	4619      	mov	r1, r3
 800588a:	f04f 0c0a 	mov.w	ip, #10
 800588e:	4620      	mov	r0, r4
 8005890:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005894:	3a30      	subs	r2, #48	@ 0x30
 8005896:	2a09      	cmp	r2, #9
 8005898:	d903      	bls.n	80058a2 <_svfiprintf_r+0x1a6>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0c6      	beq.n	800582c <_svfiprintf_r+0x130>
 800589e:	9105      	str	r1, [sp, #20]
 80058a0:	e7c4      	b.n	800582c <_svfiprintf_r+0x130>
 80058a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80058a6:	4604      	mov	r4, r0
 80058a8:	2301      	movs	r3, #1
 80058aa:	e7f0      	b.n	800588e <_svfiprintf_r+0x192>
 80058ac:	ab03      	add	r3, sp, #12
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	462a      	mov	r2, r5
 80058b2:	4b0e      	ldr	r3, [pc, #56]	@ (80058ec <_svfiprintf_r+0x1f0>)
 80058b4:	a904      	add	r1, sp, #16
 80058b6:	4638      	mov	r0, r7
 80058b8:	f3af 8000 	nop.w
 80058bc:	1c42      	adds	r2, r0, #1
 80058be:	4606      	mov	r6, r0
 80058c0:	d1d6      	bne.n	8005870 <_svfiprintf_r+0x174>
 80058c2:	89ab      	ldrh	r3, [r5, #12]
 80058c4:	065b      	lsls	r3, r3, #25
 80058c6:	f53f af2d 	bmi.w	8005724 <_svfiprintf_r+0x28>
 80058ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058cc:	e72c      	b.n	8005728 <_svfiprintf_r+0x2c>
 80058ce:	ab03      	add	r3, sp, #12
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	462a      	mov	r2, r5
 80058d4:	4b05      	ldr	r3, [pc, #20]	@ (80058ec <_svfiprintf_r+0x1f0>)
 80058d6:	a904      	add	r1, sp, #16
 80058d8:	4638      	mov	r0, r7
 80058da:	f000 f879 	bl	80059d0 <_printf_i>
 80058de:	e7ed      	b.n	80058bc <_svfiprintf_r+0x1c0>
 80058e0:	08005d50 	.word	0x08005d50
 80058e4:	08005d5a 	.word	0x08005d5a
 80058e8:	00000000 	.word	0x00000000
 80058ec:	08005645 	.word	0x08005645
 80058f0:	08005d56 	.word	0x08005d56

080058f4 <_printf_common>:
 80058f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f8:	4616      	mov	r6, r2
 80058fa:	4698      	mov	r8, r3
 80058fc:	688a      	ldr	r2, [r1, #8]
 80058fe:	690b      	ldr	r3, [r1, #16]
 8005900:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005904:	4293      	cmp	r3, r2
 8005906:	bfb8      	it	lt
 8005908:	4613      	movlt	r3, r2
 800590a:	6033      	str	r3, [r6, #0]
 800590c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005910:	4607      	mov	r7, r0
 8005912:	460c      	mov	r4, r1
 8005914:	b10a      	cbz	r2, 800591a <_printf_common+0x26>
 8005916:	3301      	adds	r3, #1
 8005918:	6033      	str	r3, [r6, #0]
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	0699      	lsls	r1, r3, #26
 800591e:	bf42      	ittt	mi
 8005920:	6833      	ldrmi	r3, [r6, #0]
 8005922:	3302      	addmi	r3, #2
 8005924:	6033      	strmi	r3, [r6, #0]
 8005926:	6825      	ldr	r5, [r4, #0]
 8005928:	f015 0506 	ands.w	r5, r5, #6
 800592c:	d106      	bne.n	800593c <_printf_common+0x48>
 800592e:	f104 0a19 	add.w	sl, r4, #25
 8005932:	68e3      	ldr	r3, [r4, #12]
 8005934:	6832      	ldr	r2, [r6, #0]
 8005936:	1a9b      	subs	r3, r3, r2
 8005938:	42ab      	cmp	r3, r5
 800593a:	dc26      	bgt.n	800598a <_printf_common+0x96>
 800593c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005940:	6822      	ldr	r2, [r4, #0]
 8005942:	3b00      	subs	r3, #0
 8005944:	bf18      	it	ne
 8005946:	2301      	movne	r3, #1
 8005948:	0692      	lsls	r2, r2, #26
 800594a:	d42b      	bmi.n	80059a4 <_printf_common+0xb0>
 800594c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005950:	4641      	mov	r1, r8
 8005952:	4638      	mov	r0, r7
 8005954:	47c8      	blx	r9
 8005956:	3001      	adds	r0, #1
 8005958:	d01e      	beq.n	8005998 <_printf_common+0xa4>
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	6922      	ldr	r2, [r4, #16]
 800595e:	f003 0306 	and.w	r3, r3, #6
 8005962:	2b04      	cmp	r3, #4
 8005964:	bf02      	ittt	eq
 8005966:	68e5      	ldreq	r5, [r4, #12]
 8005968:	6833      	ldreq	r3, [r6, #0]
 800596a:	1aed      	subeq	r5, r5, r3
 800596c:	68a3      	ldr	r3, [r4, #8]
 800596e:	bf0c      	ite	eq
 8005970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005974:	2500      	movne	r5, #0
 8005976:	4293      	cmp	r3, r2
 8005978:	bfc4      	itt	gt
 800597a:	1a9b      	subgt	r3, r3, r2
 800597c:	18ed      	addgt	r5, r5, r3
 800597e:	2600      	movs	r6, #0
 8005980:	341a      	adds	r4, #26
 8005982:	42b5      	cmp	r5, r6
 8005984:	d11a      	bne.n	80059bc <_printf_common+0xc8>
 8005986:	2000      	movs	r0, #0
 8005988:	e008      	b.n	800599c <_printf_common+0xa8>
 800598a:	2301      	movs	r3, #1
 800598c:	4652      	mov	r2, sl
 800598e:	4641      	mov	r1, r8
 8005990:	4638      	mov	r0, r7
 8005992:	47c8      	blx	r9
 8005994:	3001      	adds	r0, #1
 8005996:	d103      	bne.n	80059a0 <_printf_common+0xac>
 8005998:	f04f 30ff 	mov.w	r0, #4294967295
 800599c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a0:	3501      	adds	r5, #1
 80059a2:	e7c6      	b.n	8005932 <_printf_common+0x3e>
 80059a4:	18e1      	adds	r1, r4, r3
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	2030      	movs	r0, #48	@ 0x30
 80059aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059ae:	4422      	add	r2, r4
 80059b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059b8:	3302      	adds	r3, #2
 80059ba:	e7c7      	b.n	800594c <_printf_common+0x58>
 80059bc:	2301      	movs	r3, #1
 80059be:	4622      	mov	r2, r4
 80059c0:	4641      	mov	r1, r8
 80059c2:	4638      	mov	r0, r7
 80059c4:	47c8      	blx	r9
 80059c6:	3001      	adds	r0, #1
 80059c8:	d0e6      	beq.n	8005998 <_printf_common+0xa4>
 80059ca:	3601      	adds	r6, #1
 80059cc:	e7d9      	b.n	8005982 <_printf_common+0x8e>
	...

080059d0 <_printf_i>:
 80059d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059d4:	7e0f      	ldrb	r7, [r1, #24]
 80059d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059d8:	2f78      	cmp	r7, #120	@ 0x78
 80059da:	4691      	mov	r9, r2
 80059dc:	4680      	mov	r8, r0
 80059de:	460c      	mov	r4, r1
 80059e0:	469a      	mov	sl, r3
 80059e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059e6:	d807      	bhi.n	80059f8 <_printf_i+0x28>
 80059e8:	2f62      	cmp	r7, #98	@ 0x62
 80059ea:	d80a      	bhi.n	8005a02 <_printf_i+0x32>
 80059ec:	2f00      	cmp	r7, #0
 80059ee:	f000 80d2 	beq.w	8005b96 <_printf_i+0x1c6>
 80059f2:	2f58      	cmp	r7, #88	@ 0x58
 80059f4:	f000 80b9 	beq.w	8005b6a <_printf_i+0x19a>
 80059f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a00:	e03a      	b.n	8005a78 <_printf_i+0xa8>
 8005a02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a06:	2b15      	cmp	r3, #21
 8005a08:	d8f6      	bhi.n	80059f8 <_printf_i+0x28>
 8005a0a:	a101      	add	r1, pc, #4	@ (adr r1, 8005a10 <_printf_i+0x40>)
 8005a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a10:	08005a69 	.word	0x08005a69
 8005a14:	08005a7d 	.word	0x08005a7d
 8005a18:	080059f9 	.word	0x080059f9
 8005a1c:	080059f9 	.word	0x080059f9
 8005a20:	080059f9 	.word	0x080059f9
 8005a24:	080059f9 	.word	0x080059f9
 8005a28:	08005a7d 	.word	0x08005a7d
 8005a2c:	080059f9 	.word	0x080059f9
 8005a30:	080059f9 	.word	0x080059f9
 8005a34:	080059f9 	.word	0x080059f9
 8005a38:	080059f9 	.word	0x080059f9
 8005a3c:	08005b7d 	.word	0x08005b7d
 8005a40:	08005aa7 	.word	0x08005aa7
 8005a44:	08005b37 	.word	0x08005b37
 8005a48:	080059f9 	.word	0x080059f9
 8005a4c:	080059f9 	.word	0x080059f9
 8005a50:	08005b9f 	.word	0x08005b9f
 8005a54:	080059f9 	.word	0x080059f9
 8005a58:	08005aa7 	.word	0x08005aa7
 8005a5c:	080059f9 	.word	0x080059f9
 8005a60:	080059f9 	.word	0x080059f9
 8005a64:	08005b3f 	.word	0x08005b3f
 8005a68:	6833      	ldr	r3, [r6, #0]
 8005a6a:	1d1a      	adds	r2, r3, #4
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6032      	str	r2, [r6, #0]
 8005a70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e09d      	b.n	8005bb8 <_printf_i+0x1e8>
 8005a7c:	6833      	ldr	r3, [r6, #0]
 8005a7e:	6820      	ldr	r0, [r4, #0]
 8005a80:	1d19      	adds	r1, r3, #4
 8005a82:	6031      	str	r1, [r6, #0]
 8005a84:	0606      	lsls	r6, r0, #24
 8005a86:	d501      	bpl.n	8005a8c <_printf_i+0xbc>
 8005a88:	681d      	ldr	r5, [r3, #0]
 8005a8a:	e003      	b.n	8005a94 <_printf_i+0xc4>
 8005a8c:	0645      	lsls	r5, r0, #25
 8005a8e:	d5fb      	bpl.n	8005a88 <_printf_i+0xb8>
 8005a90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a94:	2d00      	cmp	r5, #0
 8005a96:	da03      	bge.n	8005aa0 <_printf_i+0xd0>
 8005a98:	232d      	movs	r3, #45	@ 0x2d
 8005a9a:	426d      	negs	r5, r5
 8005a9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005aa0:	4859      	ldr	r0, [pc, #356]	@ (8005c08 <_printf_i+0x238>)
 8005aa2:	230a      	movs	r3, #10
 8005aa4:	e011      	b.n	8005aca <_printf_i+0xfa>
 8005aa6:	6821      	ldr	r1, [r4, #0]
 8005aa8:	6833      	ldr	r3, [r6, #0]
 8005aaa:	0608      	lsls	r0, r1, #24
 8005aac:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ab0:	d402      	bmi.n	8005ab8 <_printf_i+0xe8>
 8005ab2:	0649      	lsls	r1, r1, #25
 8005ab4:	bf48      	it	mi
 8005ab6:	b2ad      	uxthmi	r5, r5
 8005ab8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005aba:	4853      	ldr	r0, [pc, #332]	@ (8005c08 <_printf_i+0x238>)
 8005abc:	6033      	str	r3, [r6, #0]
 8005abe:	bf14      	ite	ne
 8005ac0:	230a      	movne	r3, #10
 8005ac2:	2308      	moveq	r3, #8
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005aca:	6866      	ldr	r6, [r4, #4]
 8005acc:	60a6      	str	r6, [r4, #8]
 8005ace:	2e00      	cmp	r6, #0
 8005ad0:	bfa2      	ittt	ge
 8005ad2:	6821      	ldrge	r1, [r4, #0]
 8005ad4:	f021 0104 	bicge.w	r1, r1, #4
 8005ad8:	6021      	strge	r1, [r4, #0]
 8005ada:	b90d      	cbnz	r5, 8005ae0 <_printf_i+0x110>
 8005adc:	2e00      	cmp	r6, #0
 8005ade:	d04b      	beq.n	8005b78 <_printf_i+0x1a8>
 8005ae0:	4616      	mov	r6, r2
 8005ae2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ae6:	fb03 5711 	mls	r7, r3, r1, r5
 8005aea:	5dc7      	ldrb	r7, [r0, r7]
 8005aec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005af0:	462f      	mov	r7, r5
 8005af2:	42bb      	cmp	r3, r7
 8005af4:	460d      	mov	r5, r1
 8005af6:	d9f4      	bls.n	8005ae2 <_printf_i+0x112>
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d10b      	bne.n	8005b14 <_printf_i+0x144>
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	07df      	lsls	r7, r3, #31
 8005b00:	d508      	bpl.n	8005b14 <_printf_i+0x144>
 8005b02:	6923      	ldr	r3, [r4, #16]
 8005b04:	6861      	ldr	r1, [r4, #4]
 8005b06:	4299      	cmp	r1, r3
 8005b08:	bfde      	ittt	le
 8005b0a:	2330      	movle	r3, #48	@ 0x30
 8005b0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b14:	1b92      	subs	r2, r2, r6
 8005b16:	6122      	str	r2, [r4, #16]
 8005b18:	f8cd a000 	str.w	sl, [sp]
 8005b1c:	464b      	mov	r3, r9
 8005b1e:	aa03      	add	r2, sp, #12
 8005b20:	4621      	mov	r1, r4
 8005b22:	4640      	mov	r0, r8
 8005b24:	f7ff fee6 	bl	80058f4 <_printf_common>
 8005b28:	3001      	adds	r0, #1
 8005b2a:	d14a      	bne.n	8005bc2 <_printf_i+0x1f2>
 8005b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b30:	b004      	add	sp, #16
 8005b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	f043 0320 	orr.w	r3, r3, #32
 8005b3c:	6023      	str	r3, [r4, #0]
 8005b3e:	4833      	ldr	r0, [pc, #204]	@ (8005c0c <_printf_i+0x23c>)
 8005b40:	2778      	movs	r7, #120	@ 0x78
 8005b42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	6831      	ldr	r1, [r6, #0]
 8005b4a:	061f      	lsls	r7, r3, #24
 8005b4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b50:	d402      	bmi.n	8005b58 <_printf_i+0x188>
 8005b52:	065f      	lsls	r7, r3, #25
 8005b54:	bf48      	it	mi
 8005b56:	b2ad      	uxthmi	r5, r5
 8005b58:	6031      	str	r1, [r6, #0]
 8005b5a:	07d9      	lsls	r1, r3, #31
 8005b5c:	bf44      	itt	mi
 8005b5e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b62:	6023      	strmi	r3, [r4, #0]
 8005b64:	b11d      	cbz	r5, 8005b6e <_printf_i+0x19e>
 8005b66:	2310      	movs	r3, #16
 8005b68:	e7ac      	b.n	8005ac4 <_printf_i+0xf4>
 8005b6a:	4827      	ldr	r0, [pc, #156]	@ (8005c08 <_printf_i+0x238>)
 8005b6c:	e7e9      	b.n	8005b42 <_printf_i+0x172>
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	f023 0320 	bic.w	r3, r3, #32
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	e7f6      	b.n	8005b66 <_printf_i+0x196>
 8005b78:	4616      	mov	r6, r2
 8005b7a:	e7bd      	b.n	8005af8 <_printf_i+0x128>
 8005b7c:	6833      	ldr	r3, [r6, #0]
 8005b7e:	6825      	ldr	r5, [r4, #0]
 8005b80:	6961      	ldr	r1, [r4, #20]
 8005b82:	1d18      	adds	r0, r3, #4
 8005b84:	6030      	str	r0, [r6, #0]
 8005b86:	062e      	lsls	r6, r5, #24
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	d501      	bpl.n	8005b90 <_printf_i+0x1c0>
 8005b8c:	6019      	str	r1, [r3, #0]
 8005b8e:	e002      	b.n	8005b96 <_printf_i+0x1c6>
 8005b90:	0668      	lsls	r0, r5, #25
 8005b92:	d5fb      	bpl.n	8005b8c <_printf_i+0x1bc>
 8005b94:	8019      	strh	r1, [r3, #0]
 8005b96:	2300      	movs	r3, #0
 8005b98:	6123      	str	r3, [r4, #16]
 8005b9a:	4616      	mov	r6, r2
 8005b9c:	e7bc      	b.n	8005b18 <_printf_i+0x148>
 8005b9e:	6833      	ldr	r3, [r6, #0]
 8005ba0:	1d1a      	adds	r2, r3, #4
 8005ba2:	6032      	str	r2, [r6, #0]
 8005ba4:	681e      	ldr	r6, [r3, #0]
 8005ba6:	6862      	ldr	r2, [r4, #4]
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4630      	mov	r0, r6
 8005bac:	f7fa fb10 	bl	80001d0 <memchr>
 8005bb0:	b108      	cbz	r0, 8005bb6 <_printf_i+0x1e6>
 8005bb2:	1b80      	subs	r0, r0, r6
 8005bb4:	6060      	str	r0, [r4, #4]
 8005bb6:	6863      	ldr	r3, [r4, #4]
 8005bb8:	6123      	str	r3, [r4, #16]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bc0:	e7aa      	b.n	8005b18 <_printf_i+0x148>
 8005bc2:	6923      	ldr	r3, [r4, #16]
 8005bc4:	4632      	mov	r2, r6
 8005bc6:	4649      	mov	r1, r9
 8005bc8:	4640      	mov	r0, r8
 8005bca:	47d0      	blx	sl
 8005bcc:	3001      	adds	r0, #1
 8005bce:	d0ad      	beq.n	8005b2c <_printf_i+0x15c>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	079b      	lsls	r3, r3, #30
 8005bd4:	d413      	bmi.n	8005bfe <_printf_i+0x22e>
 8005bd6:	68e0      	ldr	r0, [r4, #12]
 8005bd8:	9b03      	ldr	r3, [sp, #12]
 8005bda:	4298      	cmp	r0, r3
 8005bdc:	bfb8      	it	lt
 8005bde:	4618      	movlt	r0, r3
 8005be0:	e7a6      	b.n	8005b30 <_printf_i+0x160>
 8005be2:	2301      	movs	r3, #1
 8005be4:	4632      	mov	r2, r6
 8005be6:	4649      	mov	r1, r9
 8005be8:	4640      	mov	r0, r8
 8005bea:	47d0      	blx	sl
 8005bec:	3001      	adds	r0, #1
 8005bee:	d09d      	beq.n	8005b2c <_printf_i+0x15c>
 8005bf0:	3501      	adds	r5, #1
 8005bf2:	68e3      	ldr	r3, [r4, #12]
 8005bf4:	9903      	ldr	r1, [sp, #12]
 8005bf6:	1a5b      	subs	r3, r3, r1
 8005bf8:	42ab      	cmp	r3, r5
 8005bfa:	dcf2      	bgt.n	8005be2 <_printf_i+0x212>
 8005bfc:	e7eb      	b.n	8005bd6 <_printf_i+0x206>
 8005bfe:	2500      	movs	r5, #0
 8005c00:	f104 0619 	add.w	r6, r4, #25
 8005c04:	e7f5      	b.n	8005bf2 <_printf_i+0x222>
 8005c06:	bf00      	nop
 8005c08:	08005d61 	.word	0x08005d61
 8005c0c:	08005d72 	.word	0x08005d72

08005c10 <memmove>:
 8005c10:	4288      	cmp	r0, r1
 8005c12:	b510      	push	{r4, lr}
 8005c14:	eb01 0402 	add.w	r4, r1, r2
 8005c18:	d902      	bls.n	8005c20 <memmove+0x10>
 8005c1a:	4284      	cmp	r4, r0
 8005c1c:	4623      	mov	r3, r4
 8005c1e:	d807      	bhi.n	8005c30 <memmove+0x20>
 8005c20:	1e43      	subs	r3, r0, #1
 8005c22:	42a1      	cmp	r1, r4
 8005c24:	d008      	beq.n	8005c38 <memmove+0x28>
 8005c26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c2e:	e7f8      	b.n	8005c22 <memmove+0x12>
 8005c30:	4402      	add	r2, r0
 8005c32:	4601      	mov	r1, r0
 8005c34:	428a      	cmp	r2, r1
 8005c36:	d100      	bne.n	8005c3a <memmove+0x2a>
 8005c38:	bd10      	pop	{r4, pc}
 8005c3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c42:	e7f7      	b.n	8005c34 <memmove+0x24>

08005c44 <_sbrk_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	4d06      	ldr	r5, [pc, #24]	@ (8005c60 <_sbrk_r+0x1c>)
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	602b      	str	r3, [r5, #0]
 8005c50:	f7fb fc8a 	bl	8001568 <_sbrk>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	d102      	bne.n	8005c5e <_sbrk_r+0x1a>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	b103      	cbz	r3, 8005c5e <_sbrk_r+0x1a>
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	bd38      	pop	{r3, r4, r5, pc}
 8005c60:	2000095c 	.word	0x2000095c

08005c64 <memcpy>:
 8005c64:	440a      	add	r2, r1
 8005c66:	4291      	cmp	r1, r2
 8005c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c6c:	d100      	bne.n	8005c70 <memcpy+0xc>
 8005c6e:	4770      	bx	lr
 8005c70:	b510      	push	{r4, lr}
 8005c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c7a:	4291      	cmp	r1, r2
 8005c7c:	d1f9      	bne.n	8005c72 <memcpy+0xe>
 8005c7e:	bd10      	pop	{r4, pc}

08005c80 <_realloc_r>:
 8005c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c84:	4680      	mov	r8, r0
 8005c86:	4615      	mov	r5, r2
 8005c88:	460c      	mov	r4, r1
 8005c8a:	b921      	cbnz	r1, 8005c96 <_realloc_r+0x16>
 8005c8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c90:	4611      	mov	r1, r2
 8005c92:	f7ff bc4b 	b.w	800552c <_malloc_r>
 8005c96:	b92a      	cbnz	r2, 8005ca4 <_realloc_r+0x24>
 8005c98:	f7ff fbdc 	bl	8005454 <_free_r>
 8005c9c:	2400      	movs	r4, #0
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ca4:	f000 f81a 	bl	8005cdc <_malloc_usable_size_r>
 8005ca8:	4285      	cmp	r5, r0
 8005caa:	4606      	mov	r6, r0
 8005cac:	d802      	bhi.n	8005cb4 <_realloc_r+0x34>
 8005cae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005cb2:	d8f4      	bhi.n	8005c9e <_realloc_r+0x1e>
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	4640      	mov	r0, r8
 8005cb8:	f7ff fc38 	bl	800552c <_malloc_r>
 8005cbc:	4607      	mov	r7, r0
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d0ec      	beq.n	8005c9c <_realloc_r+0x1c>
 8005cc2:	42b5      	cmp	r5, r6
 8005cc4:	462a      	mov	r2, r5
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	bf28      	it	cs
 8005cca:	4632      	movcs	r2, r6
 8005ccc:	f7ff ffca 	bl	8005c64 <memcpy>
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	4640      	mov	r0, r8
 8005cd4:	f7ff fbbe 	bl	8005454 <_free_r>
 8005cd8:	463c      	mov	r4, r7
 8005cda:	e7e0      	b.n	8005c9e <_realloc_r+0x1e>

08005cdc <_malloc_usable_size_r>:
 8005cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ce0:	1f18      	subs	r0, r3, #4
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	bfbc      	itt	lt
 8005ce6:	580b      	ldrlt	r3, [r1, r0]
 8005ce8:	18c0      	addlt	r0, r0, r3
 8005cea:	4770      	bx	lr

08005cec <_init>:
 8005cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cee:	bf00      	nop
 8005cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf2:	bc08      	pop	{r3}
 8005cf4:	469e      	mov	lr, r3
 8005cf6:	4770      	bx	lr

08005cf8 <_fini>:
 8005cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfa:	bf00      	nop
 8005cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfe:	bc08      	pop	{r3}
 8005d00:	469e      	mov	lr, r3
 8005d02:	4770      	bx	lr
